# Python stubs generated by omniidl from ITC_INJ.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "IBASE.idl"
import IBASE_idl
_0_IBASE = omniORB.openModule("IBASE")
_0_IBASE__POA = omniORB.openModule("IBASE__POA")

# #include "ITC.idl"
import ITC_idl
_0_ITC = omniORB.openModule("ITC")
_0_ITC__POA = omniORB.openModule("ITC__POA")

#
# Start of module "ITC_INJ"
#
__name__ = "ITC_INJ"
_0_ITC_INJ = omniORB.openModule("ITC_INJ", r"ITC_INJ.idl")
_0_ITC_INJ__POA = omniORB.openModule("ITC_INJ__POA", r"ITC_INJ.idl")


# typedef ... InterlockStateType
class InterlockStateType:
    _NP_RepositoryId = "IDL:ITC_INJ/InterlockStateType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.InterlockStateType = InterlockStateType
_0_ITC_INJ._d_InterlockStateType  = omniORB.tcInternal.tv_char
_0_ITC_INJ._ad_InterlockStateType = (omniORB.tcInternal.tv_alias, InterlockStateType._NP_RepositoryId, "InterlockStateType", omniORB.tcInternal.tv_char)
_0_ITC_INJ._tc_InterlockStateType = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_InterlockStateType)
omniORB.registerType(InterlockStateType._NP_RepositoryId, _0_ITC_INJ._ad_InterlockStateType, _0_ITC_INJ._tc_InterlockStateType)
del InterlockStateType
_0_ITC_INJ.IL_GO = "G"
_0_ITC_INJ.IL_WAIT = "W"
_0_ITC_INJ.IL_FAIL = "F"

# typedef ... LinkStateType
class LinkStateType:
    _NP_RepositoryId = "IDL:ITC_INJ/LinkStateType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.LinkStateType = LinkStateType
_0_ITC_INJ._d_LinkStateType  = omniORB.tcInternal.tv_char
_0_ITC_INJ._ad_LinkStateType = (omniORB.tcInternal.tv_alias, LinkStateType._NP_RepositoryId, "LinkStateType", omniORB.tcInternal.tv_char)
_0_ITC_INJ._tc_LinkStateType = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_LinkStateType)
omniORB.registerType(LinkStateType._NP_RepositoryId, _0_ITC_INJ._ad_LinkStateType, _0_ITC_INJ._tc_LinkStateType)
del LinkStateType
_0_ITC_INJ.LINK_UP = "U"
_0_ITC_INJ.LINK_DOWN = "D"

# typedef ... ObqmID
class ObqmID:
    _NP_RepositoryId = "IDL:ITC_INJ/ObqmID:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.ObqmID = ObqmID
_0_ITC_INJ._d_ObqmID  = omniORB.tcInternal.tv_ushort
_0_ITC_INJ._ad_ObqmID = (omniORB.tcInternal.tv_alias, ObqmID._NP_RepositoryId, "ObqmID", omniORB.tcInternal.tv_ushort)
_0_ITC_INJ._tc_ObqmID = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_ObqmID)
omniORB.registerType(ObqmID._NP_RepositoryId, _0_ITC_INJ._ad_ObqmID, _0_ITC_INJ._tc_ObqmID)
del ObqmID

# struct ObqmSpaceStatus
_0_ITC_INJ.ObqmSpaceStatus = omniORB.newEmptyClass()
class ObqmSpaceStatus (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/ObqmSpaceStatus:1.0"

    def __init__(self, m_queueId, m_spaceAvailable):
        self.m_queueId = m_queueId
        self.m_spaceAvailable = m_spaceAvailable

_0_ITC_INJ.ObqmSpaceStatus = ObqmSpaceStatus
_0_ITC_INJ._d_ObqmSpaceStatus  = (omniORB.tcInternal.tv_struct, ObqmSpaceStatus, ObqmSpaceStatus._NP_RepositoryId, "ObqmSpaceStatus", "m_queueId", omniORB.typeMapping["IDL:ITC_INJ/ObqmID:1.0"], "m_spaceAvailable", omniORB.tcInternal.tv_boolean)
_0_ITC_INJ._tc_ObqmSpaceStatus = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_ObqmSpaceStatus)
omniORB.registerType(ObqmSpaceStatus._NP_RepositoryId, _0_ITC_INJ._d_ObqmSpaceStatus, _0_ITC_INJ._tc_ObqmSpaceStatus)
del ObqmSpaceStatus

# typedef ... ObqmSpaceStatusSeqType
class ObqmSpaceStatusSeqType:
    _NP_RepositoryId = "IDL:ITC_INJ/ObqmSpaceStatusSeqType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.ObqmSpaceStatusSeqType = ObqmSpaceStatusSeqType
_0_ITC_INJ._d_ObqmSpaceStatusSeqType  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC_INJ/ObqmSpaceStatus:1.0"], 0)
_0_ITC_INJ._ad_ObqmSpaceStatusSeqType = (omniORB.tcInternal.tv_alias, ObqmSpaceStatusSeqType._NP_RepositoryId, "ObqmSpaceStatusSeqType", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC_INJ/ObqmSpaceStatus:1.0"], 0))
_0_ITC_INJ._tc_ObqmSpaceStatusSeqType = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_ObqmSpaceStatusSeqType)
omniORB.registerType(ObqmSpaceStatusSeqType._NP_RepositoryId, _0_ITC_INJ._ad_ObqmSpaceStatusSeqType, _0_ITC_INJ._tc_ObqmSpaceStatusSeqType)
del ObqmSpaceStatusSeqType

# struct SystemLinkStatus
_0_ITC_INJ.SystemLinkStatus = omniORB.newEmptyClass()
class SystemLinkStatus (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/SystemLinkStatus:1.0"

    def __init__(self, m_tc_gs_link_status, m_tc_nctrs_link_status, m_tc_spacon_link_status, m_tc_uv_link_status, m_tc_tm_flow_status):
        self.m_tc_gs_link_status = m_tc_gs_link_status
        self.m_tc_nctrs_link_status = m_tc_nctrs_link_status
        self.m_tc_spacon_link_status = m_tc_spacon_link_status
        self.m_tc_uv_link_status = m_tc_uv_link_status
        self.m_tc_tm_flow_status = m_tc_tm_flow_status

_0_ITC_INJ.SystemLinkStatus = SystemLinkStatus
_0_ITC_INJ._d_SystemLinkStatus  = (omniORB.tcInternal.tv_struct, SystemLinkStatus, SystemLinkStatus._NP_RepositoryId, "SystemLinkStatus", "m_tc_gs_link_status", omniORB.typeMapping["IDL:ITC_INJ/LinkStateType:1.0"], "m_tc_nctrs_link_status", omniORB.typeMapping["IDL:ITC_INJ/LinkStateType:1.0"], "m_tc_spacon_link_status", omniORB.typeMapping["IDL:ITC_INJ/LinkStateType:1.0"], "m_tc_uv_link_status", omniORB.typeMapping["IDL:ITC_INJ/LinkStateType:1.0"], "m_tc_tm_flow_status", omniORB.typeMapping["IDL:ITC_INJ/LinkStateType:1.0"])
_0_ITC_INJ._tc_SystemLinkStatus = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_SystemLinkStatus)
omniORB.registerType(SystemLinkStatus._NP_RepositoryId, _0_ITC_INJ._d_SystemLinkStatus, _0_ITC_INJ._tc_SystemLinkStatus)
del SystemLinkStatus

# struct MMMstatus
_0_ITC_INJ.MMMstatus = omniORB.newEmptyClass()
class MMMstatus (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/MMMstatus:1.0"

    def __init__(self, m_host, m_active):
        self.m_host = m_host
        self.m_active = m_active

_0_ITC_INJ.MMMstatus = MMMstatus
_0_ITC_INJ._d_MMMstatus  = (omniORB.tcInternal.tv_struct, MMMstatus, MMMstatus._NP_RepositoryId, "MMMstatus", "m_host", (omniORB.tcInternal.tv_string,0), "m_active", omniORB.tcInternal.tv_boolean)
_0_ITC_INJ._tc_MMMstatus = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_MMMstatus)
omniORB.registerType(MMMstatus._NP_RepositoryId, _0_ITC_INJ._d_MMMstatus, _0_ITC_INJ._tc_MMMstatus)
del MMMstatus

# struct InterlockStatus
_0_ITC_INJ.InterlockStatus = omniORB.newEmptyClass()
class InterlockStatus (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/InterlockStatus:1.0"

    def __init__(self, m_request_id, m_il_type, m_il_status):
        self.m_request_id = m_request_id
        self.m_il_type = m_il_type
        self.m_il_status = m_il_status

_0_ITC_INJ.InterlockStatus = InterlockStatus
_0_ITC_INJ._d_InterlockStatus  = (omniORB.tcInternal.tv_struct, InterlockStatus, InterlockStatus._NP_RepositoryId, "InterlockStatus", "m_request_id", omniORB.typeMapping["IDL:ITC/RequestID:1.0"], "m_il_type", omniORB.typeMapping["IDL:ITC/InterlockType:1.0"], "m_il_status", omniORB.typeMapping["IDL:ITC_INJ/InterlockStateType:1.0"])
_0_ITC_INJ._tc_InterlockStatus = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_InterlockStatus)
omniORB.registerType(InterlockStatus._NP_RepositoryId, _0_ITC_INJ._d_InterlockStatus, _0_ITC_INJ._tc_InterlockStatus)
del InterlockStatus

# struct SystemStatus
_0_ITC_INJ.SystemStatus = omniORB.newEmptyClass()
class SystemStatus (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/SystemStatus:1.0"

    def __init__(self, m_global_il_status, m_link_status, m_ptv_stat_check_status, m_ptv_dyn_check_status, m_cev_check_status, m_mmm_status, m_obqm_space_status):
        self.m_global_il_status = m_global_il_status
        self.m_link_status = m_link_status
        self.m_ptv_stat_check_status = m_ptv_stat_check_status
        self.m_ptv_dyn_check_status = m_ptv_dyn_check_status
        self.m_cev_check_status = m_cev_check_status
        self.m_mmm_status = m_mmm_status
        self.m_obqm_space_status = m_obqm_space_status

_0_ITC_INJ.SystemStatus = SystemStatus
_0_ITC_INJ._d_SystemStatus  = (omniORB.tcInternal.tv_struct, SystemStatus, SystemStatus._NP_RepositoryId, "SystemStatus", "m_global_il_status", omniORB.typeMapping["IDL:ITC_INJ/InterlockStatus:1.0"], "m_link_status", omniORB.typeMapping["IDL:ITC_INJ/SystemLinkStatus:1.0"], "m_ptv_stat_check_status", omniORB.typeMapping["IDL:ITC/CheckStateType:1.0"], "m_ptv_dyn_check_status", omniORB.typeMapping["IDL:ITC/CheckStateType:1.0"], "m_cev_check_status", omniORB.typeMapping["IDL:ITC/CheckStateType:1.0"], "m_mmm_status", omniORB.typeMapping["IDL:ITC_INJ/MMMstatus:1.0"], "m_obqm_space_status", omniORB.typeMapping["IDL:ITC_INJ/ObqmSpaceStatusSeqType:1.0"])
_0_ITC_INJ._tc_SystemStatus = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_SystemStatus)
omniORB.registerType(SystemStatus._NP_RepositoryId, _0_ITC_INJ._d_SystemStatus, _0_ITC_INJ._tc_SystemStatus)
del SystemStatus

# typedef ... InterlockStageType
class InterlockStageType:
    _NP_RepositoryId = "IDL:ITC_INJ/InterlockStageType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.InterlockStageType = InterlockStageType
_0_ITC_INJ._d_InterlockStageType  = omniORB.tcInternal.tv_char
_0_ITC_INJ._ad_InterlockStageType = (omniORB.tcInternal.tv_alias, InterlockStageType._NP_RepositoryId, "InterlockStageType", omniORB.tcInternal.tv_char)
_0_ITC_INJ._tc_InterlockStageType = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_InterlockStageType)
omniORB.registerType(InterlockStageType._NP_RepositoryId, _0_ITC_INJ._ad_InterlockStageType, _0_ITC_INJ._tc_InterlockStageType)
del InterlockStageType
_0_ITC_INJ.IL_UV_GS_ACCEPT = "G"
_0_ITC_INJ.IL_UV_GS_UPLINK = "U"
_0_ITC_INJ.IL_UV_SC_ONB_ACCEPT = "O"
_0_ITC_INJ.IL_EV_ACCEPT = "E"
_0_ITC_INJ.IL_EV_COMPLETE = "C"

# typedef ... NotificationType
class NotificationType:
    _NP_RepositoryId = "IDL:ITC_INJ/NotificationType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.NotificationType = NotificationType
_0_ITC_INJ._d_NotificationType  = omniORB.tcInternal.tv_char
_0_ITC_INJ._ad_NotificationType = (omniORB.tcInternal.tv_alias, NotificationType._NP_RepositoryId, "NotificationType", omniORB.tcInternal.tv_char)
_0_ITC_INJ._tc_NotificationType = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_NotificationType)
omniORB.registerType(NotificationType._NP_RepositoryId, _0_ITC_INJ._ad_NotificationType, _0_ITC_INJ._tc_NotificationType)
del NotificationType
_0_ITC_INJ.NOTIFY_ALL = "A"
_0_ITC_INJ.NOTIFY_SUMMARY = "S"

# typedef ... InjectRequestID
class InjectRequestID:
    _NP_RepositoryId = "IDL:ITC_INJ/InjectRequestID:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.InjectRequestID = InjectRequestID
_0_ITC_INJ._d_InjectRequestID  = omniORB.tcInternal.tv_ulong
_0_ITC_INJ._ad_InjectRequestID = (omniORB.tcInternal.tv_alias, InjectRequestID._NP_RepositoryId, "InjectRequestID", omniORB.tcInternal.tv_ulong)
_0_ITC_INJ._tc_InjectRequestID = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_InjectRequestID)
omniORB.registerType(InjectRequestID._NP_RepositoryId, _0_ITC_INJ._ad_InjectRequestID, _0_ITC_INJ._tc_InjectRequestID)
del InjectRequestID

# struct NotificationInfo
_0_ITC_INJ.NotificationInfo = omniORB.newEmptyClass()
class NotificationInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/NotificationInfo:1.0"

    def __init__(self, m_request_id, m_multiplexer_id, m_stage, m_stage_status, m_completed_flag, m_updateTime, m_tcRequestID):
        self.m_request_id = m_request_id
        self.m_multiplexer_id = m_multiplexer_id
        self.m_stage = m_stage
        self.m_stage_status = m_stage_status
        self.m_completed_flag = m_completed_flag
        self.m_updateTime = m_updateTime
        self.m_tcRequestID = m_tcRequestID

_0_ITC_INJ.NotificationInfo = NotificationInfo
_0_ITC_INJ._d_NotificationInfo  = (omniORB.tcInternal.tv_struct, NotificationInfo, NotificationInfo._NP_RepositoryId, "NotificationInfo", "m_request_id", omniORB.typeMapping["IDL:ITC_INJ/InjectRequestID:1.0"], "m_multiplexer_id", omniORB.typeMapping["IDL:ITC/RequestID:1.0"], "m_stage", omniORB.typeMapping["IDL:ITC/Stage:1.0"], "m_stage_status", omniORB.typeMapping["IDL:ITC/CEVstageStatus:1.0"], "m_completed_flag", omniORB.tcInternal.tv_boolean, "m_updateTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_tcRequestID", omniORB.typeMapping["IDL:ITC/TCrequestID:1.0"])
_0_ITC_INJ._tc_NotificationInfo = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_NotificationInfo)
omniORB.registerType(NotificationInfo._NP_RepositoryId, _0_ITC_INJ._d_NotificationInfo, _0_ITC_INJ._tc_NotificationInfo)
del NotificationInfo

# typedef ... AckFlagType
class AckFlagType:
    _NP_RepositoryId = "IDL:ITC_INJ/AckFlagType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.AckFlagType = AckFlagType
_0_ITC_INJ._d_AckFlagType  = omniORB.tcInternal.tv_octet
_0_ITC_INJ._ad_AckFlagType = (omniORB.tcInternal.tv_alias, AckFlagType._NP_RepositoryId, "AckFlagType", omniORB.tcInternal.tv_octet)
_0_ITC_INJ._tc_AckFlagType = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_AckFlagType)
omniORB.registerType(AckFlagType._NP_RepositoryId, _0_ITC_INJ._ad_AckFlagType, _0_ITC_INJ._tc_AckFlagType)
del AckFlagType
_0_ITC_INJ.PUS_ACK_ACCEPT = 1
_0_ITC_INJ.PUS_ACK_START = 2
_0_ITC_INJ.PUS_ACK_PROGRESS = 4
_0_ITC_INJ.PUS_ACK_COMPLETE = 8
_0_ITC_INJ.ACK_MIB_DEFAULT = 128

# typedef ... TransferMode
class TransferMode:
    _NP_RepositoryId = "IDL:ITC_INJ/TransferMode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.TransferMode = TransferMode
_0_ITC_INJ._d_TransferMode  = omniORB.tcInternal.tv_char
_0_ITC_INJ._ad_TransferMode = (omniORB.tcInternal.tv_alias, TransferMode._NP_RepositoryId, "TransferMode", omniORB.tcInternal.tv_char)
_0_ITC_INJ._tc_TransferMode = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_TransferMode)
omniORB.registerType(TransferMode._NP_RepositoryId, _0_ITC_INJ._ad_TransferMode, _0_ITC_INJ._tc_TransferMode)
del TransferMode
_0_ITC_INJ.AD_MODE = "A"
_0_ITC_INJ.BD_MODE = "B"

# struct ReleaseInfo
_0_ITC_INJ.ReleaseInfo = omniORB.newEmptyClass()
class ReleaseInfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/ReleaseInfo:1.0"

    def __init__(self, m_releaseTime, m_earliestReleaseTime, m_latestReleaseTime, m_executionTime, m_staticPtvFlag, m_dynamicPtvFlag, m_cevFlag, m_ackFlags):
        self.m_releaseTime = m_releaseTime
        self.m_earliestReleaseTime = m_earliestReleaseTime
        self.m_latestReleaseTime = m_latestReleaseTime
        self.m_executionTime = m_executionTime
        self.m_staticPtvFlag = m_staticPtvFlag
        self.m_dynamicPtvFlag = m_dynamicPtvFlag
        self.m_cevFlag = m_cevFlag
        self.m_ackFlags = m_ackFlags

_0_ITC_INJ.ReleaseInfo = ReleaseInfo
_0_ITC_INJ._d_ReleaseInfo  = (omniORB.tcInternal.tv_struct, ReleaseInfo, ReleaseInfo._NP_RepositoryId, "ReleaseInfo", "m_releaseTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_earliestReleaseTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_latestReleaseTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_executionTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_staticPtvFlag", omniORB.typeMapping["IDL:ITC/CheckStateType:1.0"], "m_dynamicPtvFlag", omniORB.typeMapping["IDL:ITC/CheckStateType:1.0"], "m_cevFlag", omniORB.tcInternal.tv_boolean, "m_ackFlags", omniORB.typeMapping["IDL:ITC_INJ/AckFlagType:1.0"])
_0_ITC_INJ._tc_ReleaseInfo = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_ReleaseInfo)
omniORB.registerType(ReleaseInfo._NP_RepositoryId, _0_ITC_INJ._d_ReleaseInfo, _0_ITC_INJ._tc_ReleaseInfo)
del ReleaseInfo

# struct ParameterSet
_0_ITC_INJ.ParameterSet = omniORB.newEmptyClass()
class ParameterSet (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/ParameterSet:1.0"

    def __init__(self, m_parameterSet, m_valueSet):
        self.m_parameterSet = m_parameterSet
        self.m_valueSet = m_valueSet

_0_ITC_INJ.ParameterSet = ParameterSet
_0_ITC_INJ._d_ParameterSet  = (omniORB.tcInternal.tv_struct, ParameterSet, ParameterSet._NP_RepositoryId, "ParameterSet", "m_parameterSet", (omniORB.tcInternal.tv_string,0), "m_valueSet", (omniORB.tcInternal.tv_string,0))
_0_ITC_INJ._tc_ParameterSet = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_ParameterSet)
omniORB.registerType(ParameterSet._NP_RepositoryId, _0_ITC_INJ._d_ParameterSet, _0_ITC_INJ._tc_ParameterSet)
del ParameterSet

# typedef ... ParameterSets
class ParameterSets:
    _NP_RepositoryId = "IDL:ITC_INJ/ParameterSets:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.ParameterSets = ParameterSets
_0_ITC_INJ._d_ParameterSets  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC_INJ/ParameterSet:1.0"], 0)
_0_ITC_INJ._ad_ParameterSets = (omniORB.tcInternal.tv_alias, ParameterSets._NP_RepositoryId, "ParameterSets", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC_INJ/ParameterSet:1.0"], 0))
_0_ITC_INJ._tc_ParameterSets = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_ParameterSets)
omniORB.registerType(ParameterSets._NP_RepositoryId, _0_ITC_INJ._ad_ParameterSets, _0_ITC_INJ._tc_ParameterSets)
del ParameterSets
_0_ITC_INJ.VCID_DEFAULT = 255
_0_ITC_INJ.MAPID_DEFAULT = 255

# struct CommandRequest
_0_ITC_INJ.CommandRequest = omniORB.newEmptyClass()
class CommandRequest (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/CommandRequest:1.0"

    def __init__(self, m_context, m_destination, m_mapId, m_vcId, m_cmdName, m_cmdParameters, m_paramSets, m_info, m_ilockType, m_ilockStageType, m_additionalInfo, m_tcRequestID):
        self.m_context = m_context
        self.m_destination = m_destination
        self.m_mapId = m_mapId
        self.m_vcId = m_vcId
        self.m_cmdName = m_cmdName
        self.m_cmdParameters = m_cmdParameters
        self.m_paramSets = m_paramSets
        self.m_info = m_info
        self.m_ilockType = m_ilockType
        self.m_ilockStageType = m_ilockStageType
        self.m_additionalInfo = m_additionalInfo
        self.m_tcRequestID = m_tcRequestID

_0_ITC_INJ.CommandRequest = CommandRequest
_0_ITC_INJ._d_CommandRequest  = (omniORB.tcInternal.tv_struct, CommandRequest, CommandRequest._NP_RepositoryId, "CommandRequest", "m_context", (omniORB.tcInternal.tv_string,0), "m_destination", (omniORB.tcInternal.tv_string,0), "m_mapId", omniORB.tcInternal.tv_octet, "m_vcId", omniORB.tcInternal.tv_octet, "m_cmdName", (omniORB.tcInternal.tv_string,0), "m_cmdParameters", omniORB.typeMapping["IDL:ITC/CommandParams:1.0"], "m_paramSets", omniORB.typeMapping["IDL:ITC_INJ/ParameterSets:1.0"], "m_info", omniORB.typeMapping["IDL:ITC_INJ/ReleaseInfo:1.0"], "m_ilockType", omniORB.typeMapping["IDL:ITC/InterlockType:1.0"], "m_ilockStageType", omniORB.typeMapping["IDL:ITC_INJ/InterlockStageType:1.0"], "m_additionalInfo", (omniORB.tcInternal.tv_string,0), "m_tcRequestID", omniORB.typeMapping["IDL:ITC/TCrequestID:1.0"])
_0_ITC_INJ._tc_CommandRequest = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_CommandRequest)
omniORB.registerType(CommandRequest._NP_RepositoryId, _0_ITC_INJ._d_CommandRequest, _0_ITC_INJ._tc_CommandRequest)
del CommandRequest

# typedef ... CommandRequests
class CommandRequests:
    _NP_RepositoryId = "IDL:ITC_INJ/CommandRequests:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.CommandRequests = CommandRequests
_0_ITC_INJ._d_CommandRequests  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC_INJ/CommandRequest:1.0"], 0)
_0_ITC_INJ._ad_CommandRequests = (omniORB.tcInternal.tv_alias, CommandRequests._NP_RepositoryId, "CommandRequests", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC_INJ/CommandRequest:1.0"], 0))
_0_ITC_INJ._tc_CommandRequests = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_CommandRequests)
omniORB.registerType(CommandRequests._NP_RepositoryId, _0_ITC_INJ._ad_CommandRequests, _0_ITC_INJ._tc_CommandRequests)
del CommandRequests

# typedef ... BlockType
class BlockType:
    _NP_RepositoryId = "IDL:ITC_INJ/BlockType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.BlockType = BlockType
_0_ITC_INJ._d_BlockType  = omniORB.tcInternal.tv_char
_0_ITC_INJ._ad_BlockType = (omniORB.tcInternal.tv_alias, BlockType._NP_RepositoryId, "BlockType", omniORB.tcInternal.tv_char)
_0_ITC_INJ._tc_BlockType = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_BlockType)
omniORB.registerType(BlockType._NP_RepositoryId, _0_ITC_INJ._ad_BlockType, _0_ITC_INJ._tc_BlockType)
del BlockType
_0_ITC_INJ.BLOCK_CMD = "C"
_0_ITC_INJ.BLOCK_MISSION = "M"

# struct CommandRequestBlock
_0_ITC_INJ.CommandRequestBlock = omniORB.newEmptyClass()
class CommandRequestBlock (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/CommandRequestBlock:1.0"

    def __init__(self, m_type, m_block):
        self.m_type = m_type
        self.m_block = m_block

_0_ITC_INJ.CommandRequestBlock = CommandRequestBlock
_0_ITC_INJ._d_CommandRequestBlock  = (omniORB.tcInternal.tv_struct, CommandRequestBlock, CommandRequestBlock._NP_RepositoryId, "CommandRequestBlock", "m_type", omniORB.typeMapping["IDL:ITC_INJ/BlockType:1.0"], "m_block", omniORB.typeMapping["IDL:ITC_INJ/CommandRequests:1.0"])
_0_ITC_INJ._tc_CommandRequestBlock = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_CommandRequestBlock)
omniORB.registerType(CommandRequestBlock._NP_RepositoryId, _0_ITC_INJ._d_CommandRequestBlock, _0_ITC_INJ._tc_CommandRequestBlock)
del CommandRequestBlock

# struct SequenceRequest
_0_ITC_INJ.SequenceRequest = omniORB.newEmptyClass()
class SequenceRequest (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC_INJ/SequenceRequest:1.0"

    def __init__(self, m_context, m_destination, m_seqName, m_seqParameters, m_paramSets, m_info, m_applyInfoToCommands, m_bConvertToImmediate, m_additionalInfo, m_tcRequestID):
        self.m_context = m_context
        self.m_destination = m_destination
        self.m_seqName = m_seqName
        self.m_seqParameters = m_seqParameters
        self.m_paramSets = m_paramSets
        self.m_info = m_info
        self.m_applyInfoToCommands = m_applyInfoToCommands
        self.m_bConvertToImmediate = m_bConvertToImmediate
        self.m_additionalInfo = m_additionalInfo
        self.m_tcRequestID = m_tcRequestID

_0_ITC_INJ.SequenceRequest = SequenceRequest
_0_ITC_INJ._d_SequenceRequest  = (omniORB.tcInternal.tv_struct, SequenceRequest, SequenceRequest._NP_RepositoryId, "SequenceRequest", "m_context", (omniORB.tcInternal.tv_string,0), "m_destination", (omniORB.tcInternal.tv_string,0), "m_seqName", (omniORB.tcInternal.tv_string,0), "m_seqParameters", omniORB.typeMapping["IDL:ITC/CommandParams:1.0"], "m_paramSets", omniORB.typeMapping["IDL:ITC_INJ/ParameterSets:1.0"], "m_info", omniORB.typeMapping["IDL:ITC_INJ/ReleaseInfo:1.0"], "m_applyInfoToCommands", omniORB.tcInternal.tv_boolean, "m_bConvertToImmediate", omniORB.tcInternal.tv_boolean, "m_additionalInfo", (omniORB.tcInternal.tv_string,0), "m_tcRequestID", omniORB.typeMapping["IDL:ITC/TCrequestID:1.0"])
_0_ITC_INJ._tc_SequenceRequest = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_SequenceRequest)
omniORB.registerType(SequenceRequest._NP_RepositoryId, _0_ITC_INJ._d_SequenceRequest, _0_ITC_INJ._tc_SequenceRequest)
del SequenceRequest

# typedef ... GroupType
class GroupType:
    _NP_RepositoryId = "IDL:ITC_INJ/GroupType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.GroupType = GroupType
_0_ITC_INJ._d_GroupType  = omniORB.tcInternal.tv_char
_0_ITC_INJ._ad_GroupType = (omniORB.tcInternal.tv_alias, GroupType._NP_RepositoryId, "GroupType", omniORB.tcInternal.tv_char)
_0_ITC_INJ._tc_GroupType = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_GroupType)
omniORB.registerType(GroupType._NP_RepositoryId, _0_ITC_INJ._ad_GroupType, _0_ITC_INJ._tc_GroupType)
del GroupType
_0_ITC_INJ.GROUP_CMD = "G"
_0_ITC_INJ.GROUP_BLOCK = "B"
_0_ITC_INJ.GROUP_SEQUENCE = "S"
_0_ITC_INJ.GROUP_MISSION = "M"

# union GroupElement
_0_ITC_INJ.GroupElement = omniORB.newEmptyClass()
class GroupElement (omniORB.Union):
    _NP_RepositoryId = "IDL:ITC_INJ/GroupElement:1.0"

_0_ITC_INJ.GroupElement = GroupElement

GroupElement._m_to_d = {"m_cmd": "G", "m_block": "B", "m_sequence": "S", "m_mission": "M"}
GroupElement._d_to_m = {"G": "m_cmd", "B": "m_block", "S": "m_sequence", "M": "m_mission"}
GroupElement._def_m  = None
GroupElement._def_d  = None

_0_ITC_INJ._m_GroupElement  = (("G", "m_cmd", omniORB.typeMapping["IDL:ITC_INJ/CommandRequest:1.0"]), ("B", "m_block", omniORB.typeMapping["IDL:ITC_INJ/CommandRequestBlock:1.0"]), ("S", "m_sequence", omniORB.typeMapping["IDL:ITC_INJ/SequenceRequest:1.0"]), ("M", "m_mission", omniORB.typeMapping["IDL:ITC_INJ/CommandRequest:1.0"]),)
_0_ITC_INJ._d_GroupElement  = (omniORB.tcInternal.tv_union, GroupElement, GroupElement._NP_RepositoryId, "GroupElement", omniORB.typeMapping["IDL:ITC_INJ/GroupType:1.0"], -1, _0_ITC_INJ._m_GroupElement, None, {"G": _0_ITC_INJ._m_GroupElement[0], "B": _0_ITC_INJ._m_GroupElement[1], "S": _0_ITC_INJ._m_GroupElement[2], "M": _0_ITC_INJ._m_GroupElement[3]})
_0_ITC_INJ._tc_GroupElement = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_GroupElement)
omniORB.registerType(GroupElement._NP_RepositoryId, _0_ITC_INJ._d_GroupElement, _0_ITC_INJ._tc_GroupElement)
del GroupElement

# typedef ... GroupRequest
class GroupRequest:
    _NP_RepositoryId = "IDL:ITC_INJ/GroupRequest:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC_INJ.GroupRequest = GroupRequest
_0_ITC_INJ._d_GroupRequest  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC_INJ/GroupElement:1.0"], 0)
_0_ITC_INJ._ad_GroupRequest = (omniORB.tcInternal.tv_alias, GroupRequest._NP_RepositoryId, "GroupRequest", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC_INJ/GroupElement:1.0"], 0))
_0_ITC_INJ._tc_GroupRequest = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._ad_GroupRequest)
omniORB.registerType(GroupRequest._NP_RepositoryId, _0_ITC_INJ._ad_GroupRequest, _0_ITC_INJ._tc_GroupRequest)
del GroupRequest

# interface CommandInjectMngrView
_0_ITC_INJ._d_CommandInjectMngrView = (omniORB.tcInternal.tv_objref, "IDL:ITC_INJ/CommandInjectMngrView:1.0", "CommandInjectMngrView")
omniORB.typeMapping["IDL:ITC_INJ/CommandInjectMngrView:1.0"] = _0_ITC_INJ._d_CommandInjectMngrView
_0_ITC_INJ.CommandInjectMngrView = omniORB.newEmptyClass()
class CommandInjectMngrView :
    _NP_RepositoryId = _0_ITC_INJ._d_CommandInjectMngrView[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ITC_INJ.CommandInjectMngrView = CommandInjectMngrView
_0_ITC_INJ._tc_CommandInjectMngrView = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_CommandInjectMngrView)
omniORB.registerType(CommandInjectMngrView._NP_RepositoryId, _0_ITC_INJ._d_CommandInjectMngrView, _0_ITC_INJ._tc_CommandInjectMngrView)

# CommandInjectMngrView operations and attributes
CommandInjectMngrView._d_ping = ((), (), None)
CommandInjectMngrView._d_updateRequestStatus = ((omniORB.typeMapping["IDL:ITC_INJ/NotificationInfo:1.0"], ), None, None)
CommandInjectMngrView._d_updateSystemStatus = ((omniORB.typeMapping["IDL:ITC_INJ/SystemStatus:1.0"], ), None, None)

# CommandInjectMngrView object reference
class _objref_CommandInjectMngrView (CORBA.Object):
    _NP_RepositoryId = CommandInjectMngrView._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def ping(self, *args):
        return self._obj.invoke("ping", _0_ITC_INJ.CommandInjectMngrView._d_ping, args)

    def updateRequestStatus(self, *args):
        return self._obj.invoke("updateRequestStatus", _0_ITC_INJ.CommandInjectMngrView._d_updateRequestStatus, args)

    def updateSystemStatus(self, *args):
        return self._obj.invoke("updateSystemStatus", _0_ITC_INJ.CommandInjectMngrView._d_updateSystemStatus, args)

omniORB.registerObjref(CommandInjectMngrView._NP_RepositoryId, _objref_CommandInjectMngrView)
_0_ITC_INJ._objref_CommandInjectMngrView = _objref_CommandInjectMngrView
del CommandInjectMngrView, _objref_CommandInjectMngrView

# CommandInjectMngrView skeleton
__name__ = "ITC_INJ__POA"
class CommandInjectMngrView (PortableServer.Servant):
    _NP_RepositoryId = _0_ITC_INJ.CommandInjectMngrView._NP_RepositoryId


    _omni_op_d = {"ping": _0_ITC_INJ.CommandInjectMngrView._d_ping, "updateRequestStatus": _0_ITC_INJ.CommandInjectMngrView._d_updateRequestStatus, "updateSystemStatus": _0_ITC_INJ.CommandInjectMngrView._d_updateSystemStatus}

CommandInjectMngrView._omni_skeleton = CommandInjectMngrView
_0_ITC_INJ__POA.CommandInjectMngrView = CommandInjectMngrView
omniORB.registerSkeleton(CommandInjectMngrView._NP_RepositoryId, CommandInjectMngrView)
del CommandInjectMngrView
__name__ = "ITC_INJ"

# interface CommandInjectMngr
_0_ITC_INJ._d_CommandInjectMngr = (omniORB.tcInternal.tv_objref, "IDL:ITC_INJ/CommandInjectMngr:1.0", "CommandInjectMngr")
omniORB.typeMapping["IDL:ITC_INJ/CommandInjectMngr:1.0"] = _0_ITC_INJ._d_CommandInjectMngr
_0_ITC_INJ.CommandInjectMngr = omniORB.newEmptyClass()
class CommandInjectMngr :
    _NP_RepositoryId = _0_ITC_INJ._d_CommandInjectMngr[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    
    # exception InjectionFailed
    _0_ITC_INJ.CommandInjectMngr.InjectionFailed = omniORB.newEmptyClass()
    class InjectionFailed (CORBA.UserException):
        _NP_RepositoryId = "IDL:ITC_INJ/CommandInjectMngr/InjectionFailed:1.0"

        _NP_ClassName = "ITC_INJ.CommandInjectMngr.InjectionFailed"

        def __init__(self, reason):
            CORBA.UserException.__init__(self, reason)
            self.reason = reason
    
    _d_InjectionFailed  = (omniORB.tcInternal.tv_except, InjectionFailed, InjectionFailed._NP_RepositoryId, "InjectionFailed", "reason", (omniORB.tcInternal.tv_string,0))
    _tc_InjectionFailed = omniORB.tcInternal.createTypeCode(_d_InjectionFailed)
    omniORB.registerType(InjectionFailed._NP_RepositoryId, _d_InjectionFailed, _tc_InjectionFailed)


_0_ITC_INJ.CommandInjectMngr = CommandInjectMngr
_0_ITC_INJ._tc_CommandInjectMngr = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_CommandInjectMngr)
omniORB.registerType(CommandInjectMngr._NP_RepositoryId, _0_ITC_INJ._d_CommandInjectMngr, _0_ITC_INJ._tc_CommandInjectMngr)

# CommandInjectMngr operations and attributes
CommandInjectMngr._d_ping = ((), (), None)
CommandInjectMngr._d_deregister = ((), (), None)
CommandInjectMngr._d_injectCmd = ((omniORB.typeMapping["IDL:ITC_INJ/CommandRequest:1.0"], ), (omniORB.typeMapping["IDL:ITC_INJ/InjectRequestID:1.0"], ), {_0_ITC_INJ.CommandInjectMngr.InjectionFailed._NP_RepositoryId: _0_ITC_INJ.CommandInjectMngr._d_InjectionFailed})
CommandInjectMngr._d_injectCmdBlock = ((omniORB.typeMapping["IDL:ITC_INJ/CommandRequestBlock:1.0"], ), (omniORB.typeMapping["IDL:ITC_INJ/InjectRequestID:1.0"], ), {_0_ITC_INJ.CommandInjectMngr.InjectionFailed._NP_RepositoryId: _0_ITC_INJ.CommandInjectMngr._d_InjectionFailed})
CommandInjectMngr._d_injectSeq = ((omniORB.typeMapping["IDL:ITC_INJ/SequenceRequest:1.0"], omniORB.typeMapping["IDL:ITC_INJ/NotificationType:1.0"]), (omniORB.typeMapping["IDL:ITC_INJ/InjectRequestID:1.0"], ), {_0_ITC_INJ.CommandInjectMngr.InjectionFailed._NP_RepositoryId: _0_ITC_INJ.CommandInjectMngr._d_InjectionFailed})
CommandInjectMngr._d_injectGroup = ((omniORB.typeMapping["IDL:ITC_INJ/GroupRequest:1.0"], ), (omniORB.typeMapping["IDL:ITC_INJ/InjectRequestID:1.0"], ), {_0_ITC_INJ.CommandInjectMngr.InjectionFailed._NP_RepositoryId: _0_ITC_INJ.CommandInjectMngr._d_InjectionFailed})
CommandInjectMngr._d_injectStackFile = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:ITC_INJ/NotificationType:1.0"]), (omniORB.typeMapping["IDL:ITC_INJ/InjectRequestID:1.0"], ), {_0_ITC_INJ.CommandInjectMngr.InjectionFailed._NP_RepositoryId: _0_ITC_INJ.CommandInjectMngr._d_InjectionFailed})
CommandInjectMngr._d_injectTpfFile = (((omniORB.tcInternal.tv_string,0), omniORB.typeMapping["IDL:ITC_INJ/NotificationType:1.0"]), (omniORB.typeMapping["IDL:ITC_INJ/InjectRequestID:1.0"], ), {_0_ITC_INJ.CommandInjectMngr.InjectionFailed._NP_RepositoryId: _0_ITC_INJ.CommandInjectMngr._d_InjectionFailed})
CommandInjectMngr._d_go = ((), (), None)
CommandInjectMngr._d_stop = ((), (), None)
CommandInjectMngr._d_isStopped = ((), (omniORB.tcInternal.tv_boolean, ), None)
CommandInjectMngr._d_isWaitState = ((), (omniORB.tcInternal.tv_boolean, ), None)
CommandInjectMngr._d_setTransferMode = ((omniORB.typeMapping["IDL:ITC_INJ/TransferMode:1.0"], ), (), None)
CommandInjectMngr._d_getTransferMode = ((), (omniORB.typeMapping["IDL:ITC_INJ/TransferMode:1.0"], ), None)
CommandInjectMngr._d_setLocalInterlock = ((omniORB.tcInternal.tv_boolean, ), (), None)
CommandInjectMngr._d_getLocalInterlock = ((), (omniORB.tcInternal.tv_boolean, ), None)
CommandInjectMngr._d_setAutoRejectModeOn = ((), (), None)
CommandInjectMngr._d_setAutoRejectModeOff = ((), (), None)
CommandInjectMngr._d_isAutoRejectModeOn = ((), (omniORB.tcInternal.tv_boolean, ), None)
CommandInjectMngr._d_clear = ((), (), None)
CommandInjectMngr._d_delete = ((omniORB.typeMapping["IDL:ITC_INJ/InjectRequestID:1.0"], ), (), {_0_IBASE.NotFound._NP_RepositoryId: _0_IBASE._d_NotFound})
CommandInjectMngr._d_setTpfPath = (((omniORB.tcInternal.tv_string,0), ), (), None)
CommandInjectMngr._d_setSavedStackPath = (((omniORB.tcInternal.tv_string,0), ), (), None)

# CommandInjectMngr object reference
class _objref_CommandInjectMngr (CORBA.Object):
    _NP_RepositoryId = CommandInjectMngr._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def ping(self, *args):
        return self._obj.invoke("ping", _0_ITC_INJ.CommandInjectMngr._d_ping, args)

    def deregister(self, *args):
        return self._obj.invoke("deregister", _0_ITC_INJ.CommandInjectMngr._d_deregister, args)

    def injectCmd(self, *args):
        return self._obj.invoke("injectCmd", _0_ITC_INJ.CommandInjectMngr._d_injectCmd, args)

    def injectCmdBlock(self, *args):
        return self._obj.invoke("injectCmdBlock", _0_ITC_INJ.CommandInjectMngr._d_injectCmdBlock, args)

    def injectSeq(self, *args):
        return self._obj.invoke("injectSeq", _0_ITC_INJ.CommandInjectMngr._d_injectSeq, args)

    def injectGroup(self, *args):
        return self._obj.invoke("injectGroup", _0_ITC_INJ.CommandInjectMngr._d_injectGroup, args)

    def injectStackFile(self, *args):
        return self._obj.invoke("injectStackFile", _0_ITC_INJ.CommandInjectMngr._d_injectStackFile, args)

    def injectTpfFile(self, *args):
        return self._obj.invoke("injectTpfFile", _0_ITC_INJ.CommandInjectMngr._d_injectTpfFile, args)

    def go(self, *args):
        return self._obj.invoke("go", _0_ITC_INJ.CommandInjectMngr._d_go, args)

    def stop(self, *args):
        return self._obj.invoke("stop", _0_ITC_INJ.CommandInjectMngr._d_stop, args)

    def isStopped(self, *args):
        return self._obj.invoke("isStopped", _0_ITC_INJ.CommandInjectMngr._d_isStopped, args)

    def isWaitState(self, *args):
        return self._obj.invoke("isWaitState", _0_ITC_INJ.CommandInjectMngr._d_isWaitState, args)

    def setTransferMode(self, *args):
        return self._obj.invoke("setTransferMode", _0_ITC_INJ.CommandInjectMngr._d_setTransferMode, args)

    def getTransferMode(self, *args):
        return self._obj.invoke("getTransferMode", _0_ITC_INJ.CommandInjectMngr._d_getTransferMode, args)

    def setLocalInterlock(self, *args):
        return self._obj.invoke("setLocalInterlock", _0_ITC_INJ.CommandInjectMngr._d_setLocalInterlock, args)

    def getLocalInterlock(self, *args):
        return self._obj.invoke("getLocalInterlock", _0_ITC_INJ.CommandInjectMngr._d_getLocalInterlock, args)

    def setAutoRejectModeOn(self, *args):
        return self._obj.invoke("setAutoRejectModeOn", _0_ITC_INJ.CommandInjectMngr._d_setAutoRejectModeOn, args)

    def setAutoRejectModeOff(self, *args):
        return self._obj.invoke("setAutoRejectModeOff", _0_ITC_INJ.CommandInjectMngr._d_setAutoRejectModeOff, args)

    def isAutoRejectModeOn(self, *args):
        return self._obj.invoke("isAutoRejectModeOn", _0_ITC_INJ.CommandInjectMngr._d_isAutoRejectModeOn, args)

    def clear(self, *args):
        return self._obj.invoke("clear", _0_ITC_INJ.CommandInjectMngr._d_clear, args)

    def delete(self, *args):
        return self._obj.invoke("delete", _0_ITC_INJ.CommandInjectMngr._d_delete, args)

    def setTpfPath(self, *args):
        return self._obj.invoke("setTpfPath", _0_ITC_INJ.CommandInjectMngr._d_setTpfPath, args)

    def setSavedStackPath(self, *args):
        return self._obj.invoke("setSavedStackPath", _0_ITC_INJ.CommandInjectMngr._d_setSavedStackPath, args)

omniORB.registerObjref(CommandInjectMngr._NP_RepositoryId, _objref_CommandInjectMngr)
_0_ITC_INJ._objref_CommandInjectMngr = _objref_CommandInjectMngr
del CommandInjectMngr, _objref_CommandInjectMngr

# CommandInjectMngr skeleton
__name__ = "ITC_INJ__POA"
class CommandInjectMngr (PortableServer.Servant):
    _NP_RepositoryId = _0_ITC_INJ.CommandInjectMngr._NP_RepositoryId


    _omni_op_d = {"ping": _0_ITC_INJ.CommandInjectMngr._d_ping, "deregister": _0_ITC_INJ.CommandInjectMngr._d_deregister, "injectCmd": _0_ITC_INJ.CommandInjectMngr._d_injectCmd, "injectCmdBlock": _0_ITC_INJ.CommandInjectMngr._d_injectCmdBlock, "injectSeq": _0_ITC_INJ.CommandInjectMngr._d_injectSeq, "injectGroup": _0_ITC_INJ.CommandInjectMngr._d_injectGroup, "injectStackFile": _0_ITC_INJ.CommandInjectMngr._d_injectStackFile, "injectTpfFile": _0_ITC_INJ.CommandInjectMngr._d_injectTpfFile, "go": _0_ITC_INJ.CommandInjectMngr._d_go, "stop": _0_ITC_INJ.CommandInjectMngr._d_stop, "isStopped": _0_ITC_INJ.CommandInjectMngr._d_isStopped, "isWaitState": _0_ITC_INJ.CommandInjectMngr._d_isWaitState, "setTransferMode": _0_ITC_INJ.CommandInjectMngr._d_setTransferMode, "getTransferMode": _0_ITC_INJ.CommandInjectMngr._d_getTransferMode, "setLocalInterlock": _0_ITC_INJ.CommandInjectMngr._d_setLocalInterlock, "getLocalInterlock": _0_ITC_INJ.CommandInjectMngr._d_getLocalInterlock, "setAutoRejectModeOn": _0_ITC_INJ.CommandInjectMngr._d_setAutoRejectModeOn, "setAutoRejectModeOff": _0_ITC_INJ.CommandInjectMngr._d_setAutoRejectModeOff, "isAutoRejectModeOn": _0_ITC_INJ.CommandInjectMngr._d_isAutoRejectModeOn, "clear": _0_ITC_INJ.CommandInjectMngr._d_clear, "delete": _0_ITC_INJ.CommandInjectMngr._d_delete, "setTpfPath": _0_ITC_INJ.CommandInjectMngr._d_setTpfPath, "setSavedStackPath": _0_ITC_INJ.CommandInjectMngr._d_setSavedStackPath}

CommandInjectMngr._omni_skeleton = CommandInjectMngr
_0_ITC_INJ__POA.CommandInjectMngr = CommandInjectMngr
omniORB.registerSkeleton(CommandInjectMngr._NP_RepositoryId, CommandInjectMngr)
del CommandInjectMngr
__name__ = "ITC_INJ"

# interface TCinjectServerMngr
_0_ITC_INJ._d_TCinjectServerMngr = (omniORB.tcInternal.tv_objref, "IDL:ITC_INJ/TCinjectServerMngr:1.0", "TCinjectServerMngr")
omniORB.typeMapping["IDL:ITC_INJ/TCinjectServerMngr:1.0"] = _0_ITC_INJ._d_TCinjectServerMngr
_0_ITC_INJ.TCinjectServerMngr = omniORB.newEmptyClass()
class TCinjectServerMngr :
    _NP_RepositoryId = _0_ITC_INJ._d_TCinjectServerMngr[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    ServiceName = "TC_INJ_002"
    
    # exception RegistrationFailed
    _0_ITC_INJ.TCinjectServerMngr.RegistrationFailed = omniORB.newEmptyClass()
    class RegistrationFailed (CORBA.UserException):
        _NP_RepositoryId = "IDL:ITC_INJ/TCinjectServerMngr/RegistrationFailed:1.0"

        _NP_ClassName = "ITC_INJ.TCinjectServerMngr.RegistrationFailed"

        def __init__(self, reason):
            CORBA.UserException.__init__(self, reason)
            self.reason = reason
    
    _d_RegistrationFailed  = (omniORB.tcInternal.tv_except, RegistrationFailed, RegistrationFailed._NP_RepositoryId, "RegistrationFailed", "reason", (omniORB.tcInternal.tv_string,0))
    _tc_RegistrationFailed = omniORB.tcInternal.createTypeCode(_d_RegistrationFailed)
    omniORB.registerType(RegistrationFailed._NP_RepositoryId, _d_RegistrationFailed, _tc_RegistrationFailed)


_0_ITC_INJ.TCinjectServerMngr = TCinjectServerMngr
_0_ITC_INJ._tc_TCinjectServerMngr = omniORB.tcInternal.createTypeCode(_0_ITC_INJ._d_TCinjectServerMngr)
omniORB.registerType(TCinjectServerMngr._NP_RepositoryId, _0_ITC_INJ._d_TCinjectServerMngr, _0_ITC_INJ._tc_TCinjectServerMngr)

# TCinjectServerMngr operations and attributes
TCinjectServerMngr._d_getUTC = ((), (omniORB.typeMapping["IDL:IBASE/Time:1.0"], ), None)
TCinjectServerMngr._d_getDeltaTimeToUTC = ((), (omniORB.typeMapping["IDL:IBASE/Time:1.0"], ), None)
TCinjectServerMngr._d_getTCinjectMngr = ((omniORB.typeMapping["IDL:ITC_INJ/CommandInjectMngrView:1.0"], (omniORB.tcInternal.tv_string,0)), (omniORB.typeMapping["IDL:ITC_INJ/CommandInjectMngr:1.0"], ), {_0_ITC_INJ.TCinjectServerMngr.RegistrationFailed._NP_RepositoryId: _0_ITC_INJ.TCinjectServerMngr._d_RegistrationFailed})

# TCinjectServerMngr object reference
class _objref_TCinjectServerMngr (CORBA.Object):
    _NP_RepositoryId = TCinjectServerMngr._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def getUTC(self, *args):
        return self._obj.invoke("getUTC", _0_ITC_INJ.TCinjectServerMngr._d_getUTC, args)

    def getDeltaTimeToUTC(self, *args):
        return self._obj.invoke("getDeltaTimeToUTC", _0_ITC_INJ.TCinjectServerMngr._d_getDeltaTimeToUTC, args)

    def getTCinjectMngr(self, *args):
        return self._obj.invoke("getTCinjectMngr", _0_ITC_INJ.TCinjectServerMngr._d_getTCinjectMngr, args)

omniORB.registerObjref(TCinjectServerMngr._NP_RepositoryId, _objref_TCinjectServerMngr)
_0_ITC_INJ._objref_TCinjectServerMngr = _objref_TCinjectServerMngr
del TCinjectServerMngr, _objref_TCinjectServerMngr

# TCinjectServerMngr skeleton
__name__ = "ITC_INJ__POA"
class TCinjectServerMngr (PortableServer.Servant):
    _NP_RepositoryId = _0_ITC_INJ.TCinjectServerMngr._NP_RepositoryId


    _omni_op_d = {"getUTC": _0_ITC_INJ.TCinjectServerMngr._d_getUTC, "getDeltaTimeToUTC": _0_ITC_INJ.TCinjectServerMngr._d_getDeltaTimeToUTC, "getTCinjectMngr": _0_ITC_INJ.TCinjectServerMngr._d_getTCinjectMngr}

TCinjectServerMngr._omni_skeleton = TCinjectServerMngr
_0_ITC_INJ__POA.TCinjectServerMngr = TCinjectServerMngr
omniORB.registerSkeleton(TCinjectServerMngr._NP_RepositoryId, TCinjectServerMngr)
del TCinjectServerMngr
__name__ = "ITC_INJ"

#
# End of module "ITC_INJ"
#
__name__ = "ITC_INJ_idl"

_exported_modules = ( "ITC_INJ", )

# The end.

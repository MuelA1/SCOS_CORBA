# Python stubs generated by omniidl from ITC.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "IBASE.idl"
import IBASE_idl
_0_IBASE = omniORB.openModule("IBASE")
_0_IBASE__POA = omniORB.openModule("IBASE__POA")

#
# Start of module "ITC"
#
__name__ = "ITC"
_0_ITC = omniORB.openModule("ITC", r"ITC.idl")
_0_ITC__POA = omniORB.openModule("ITC__POA", r"ITC.idl")


# typedef ... CommandFlags
class CommandFlags:
    _NP_RepositoryId = "IDL:ITC/CommandFlags:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.CommandFlags = CommandFlags
_0_ITC._d_CommandFlags  = omniORB.tcInternal.tv_long
_0_ITC._ad_CommandFlags = (omniORB.tcInternal.tv_alias, CommandFlags._NP_RepositoryId, "CommandFlags", omniORB.tcInternal.tv_long)
_0_ITC._tc_CommandFlags = omniORB.tcInternal.createTypeCode(_0_ITC._ad_CommandFlags)
omniORB.registerType(CommandFlags._NP_RepositoryId, _0_ITC._ad_CommandFlags, _0_ITC._tc_CommandFlags)
del CommandFlags
_0_ITC.IS_IN_GROUP = 1
_0_ITC.IS_GROUP_START = 2
_0_ITC.IS_GROUP_MIDDLE = 4
_0_ITC.IS_GROUP_END = 8
_0_ITC.IS_IN_BLOCK = 16
_0_ITC.IS_BLOCK_START = 32
_0_ITC.IS_BLOCK_MIDDLE = 64
_0_ITC.IS_BLOCK_END = 128
_0_ITC.IS_TIMETAGGED = 256
_0_ITC.IS_PTV_CHECK_AT_SRC = 512
_0_ITC.IS_RELEASE_FAILED = 4096
_0_ITC.IS_UV_FAILED = 8192
_0_ITC.IS_VER_FINAL_OK = 16384
_0_ITC.PTC_NOTIFICATION = 65536
_0_ITC.CEV_NOTIFICATION = 131072
_0_ITC.HAS_UNCERTAIN_PASSED_STAGES = 262144
_0_ITC.HAS_UNVERIFIED_STAGES = 524288
_0_ITC.HAS_IDLE_STAGES = 1048576
_0_ITC.HAS_PENDING_STAGES = 2097152
_0_ITC.HAS_DISABLED_STAGES = 4194304
_0_ITC.HAS_FAILED_STAGES = 8388608
_0_ITC.HAS_UNCERTAIN_FAILED_STAGES = 16777216
_0_ITC.HAS_UNKNOWN_STAGES = 33554432
_0_ITC.HAS_AFFECTED_STAGES = 67108864
_0_ITC.HAS_SUPERSEDED_STAGES = 134217728
_0_ITC.HAS_TIMEOUT_STAGES = 268435456
_0_ITC.HAS_ASSUMED_STAGES = 536870912
_0_ITC.HAS_SCC_STAGES = 1073741824

# typedef ... SourceType
class SourceType:
    _NP_RepositoryId = "IDL:ITC/SourceType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.SourceType = SourceType
_0_ITC._d_SourceType  = omniORB.tcInternal.tv_octet
_0_ITC._ad_SourceType = (omniORB.tcInternal.tv_alias, SourceType._NP_RepositoryId, "SourceType", omniORB.tcInternal.tv_octet)
_0_ITC._tc_SourceType = omniORB.tcInternal.createTypeCode(_0_ITC._ad_SourceType)
omniORB.registerType(SourceType._NP_RepositoryId, _0_ITC._ad_SourceType, _0_ITC._tc_SourceType)
del SourceType
_0_ITC.MANUAL_STACK = 1
_0_ITC.AUTO_STACK = 2
_0_ITC.EXT_SOURCE = 4
_0_ITC.TC_SPACON = 8
_0_ITC.OBQM_DISP = 16

# typedef ... CheckStateType
class CheckStateType:
    _NP_RepositoryId = "IDL:ITC/CheckStateType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.CheckStateType = CheckStateType
_0_ITC._d_CheckStateType  = omniORB.tcInternal.tv_char
_0_ITC._ad_CheckStateType = (omniORB.tcInternal.tv_alias, CheckStateType._NP_RepositoryId, "CheckStateType", omniORB.tcInternal.tv_char)
_0_ITC._tc_CheckStateType = omniORB.tcInternal.createTypeCode(_0_ITC._ad_CheckStateType)
omniORB.registerType(CheckStateType._NP_RepositoryId, _0_ITC._ad_CheckStateType, _0_ITC._tc_CheckStateType)
del CheckStateType
_0_ITC.CHECK_ENABLED = "E"
_0_ITC.CHECK_DISABLED = "D"
_0_ITC.CHECK_OVERRIDE = "O"
_0_ITC.CHECK_NO_NOTIFICATION = "N"

# typedef ... TimeTaggedRqstObqStatus
class TimeTaggedRqstObqStatus:
    _NP_RepositoryId = "IDL:ITC/TimeTaggedRqstObqStatus:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.TimeTaggedRqstObqStatus = TimeTaggedRqstObqStatus
_0_ITC._d_TimeTaggedRqstObqStatus  = omniORB.tcInternal.tv_char
_0_ITC._ad_TimeTaggedRqstObqStatus = (omniORB.tcInternal.tv_alias, TimeTaggedRqstObqStatus._NP_RepositoryId, "TimeTaggedRqstObqStatus", omniORB.tcInternal.tv_char)
_0_ITC._tc_TimeTaggedRqstObqStatus = omniORB.tcInternal.createTypeCode(_0_ITC._ad_TimeTaggedRqstObqStatus)
omniORB.registerType(TimeTaggedRqstObqStatus._NP_RepositoryId, _0_ITC._ad_TimeTaggedRqstObqStatus, _0_ITC._tc_TimeTaggedRqstObqStatus)
del TimeTaggedRqstObqStatus
_0_ITC.TT_ASSUMED_DELETED = "A"
_0_ITC.TT_DELETED = "d"
_0_ITC.TT_FAILED_LOAD = "F"
_0_ITC.TT_ENABLED = "E"
_0_ITC.TT_DISABLED = "D"
_0_ITC.TT_UNKNOWN = "U"

# typedef ... InterlockType
class InterlockType:
    _NP_RepositoryId = "IDL:ITC/InterlockType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.InterlockType = InterlockType
_0_ITC._d_InterlockType  = omniORB.tcInternal.tv_char
_0_ITC._ad_InterlockType = (omniORB.tcInternal.tv_alias, InterlockType._NP_RepositoryId, "InterlockType", omniORB.tcInternal.tv_char)
_0_ITC._tc_InterlockType = omniORB.tcInternal.createTypeCode(_0_ITC._ad_InterlockType)
omniORB.registerType(InterlockType._NP_RepositoryId, _0_ITC._ad_InterlockType, _0_ITC._tc_InterlockType)
del InterlockType
_0_ITC.IL_NONE = "N"
_0_ITC.IL_LOCAL = "L"
_0_ITC.IL_GLOBAL = "G"
_0_ITC.IL_SUBSYS_LOCAL = "l"
_0_ITC.IL_SUBSYS_GLOBAL = "g"
_0_ITC.IL_FAIL_ONLY_LOCAL = "F"
_0_ITC.IL_FAIL_ONLY_SUBSYS = "f"

# typedef ... CEVstageStatus
class CEVstageStatus:
    _NP_RepositoryId = "IDL:ITC/CEVstageStatus:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.CEVstageStatus = CEVstageStatus
_0_ITC._d_CEVstageStatus  = omniORB.tcInternal.tv_short
_0_ITC._ad_CEVstageStatus = (omniORB.tcInternal.tv_alias, CEVstageStatus._NP_RepositoryId, "CEVstageStatus", omniORB.tcInternal.tv_short)
_0_ITC._tc_CEVstageStatus = omniORB.tcInternal.createTypeCode(_0_ITC._ad_CEVstageStatus)
omniORB.registerType(CEVstageStatus._NP_RepositoryId, _0_ITC._ad_CEVstageStatus, _0_ITC._tc_CEVstageStatus)
del CEVstageStatus
_0_ITC.NOT_APPLICABLE = 1
_0_ITC.PASSED = 2
_0_ITC.UNCERTAIN_PASSED = 4
_0_ITC.UNVERIFIED = 8
_0_ITC.IDLE = 16
_0_ITC.PENDING = 32
_0_ITC.DISABLED = 64
_0_ITC.FAILED = 128
_0_ITC.UNCERTAIN_FAILED = 256
_0_ITC.UNKNOWN = 512
_0_ITC.AFFECTED = 1024
_0_ITC.SUPERSEDED = 2048
_0_ITC.TIMEOUT = 4096
_0_ITC.ASSUMED = 8192
_0_ITC.SCC = 16384

# typedef ... Stage
class Stage:
    _NP_RepositoryId = "IDL:ITC/Stage:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.Stage = Stage
_0_ITC._d_Stage  = omniORB.tcInternal.tv_char
_0_ITC._ad_Stage = (omniORB.tcInternal.tv_alias, Stage._NP_RepositoryId, "Stage", omniORB.tcInternal.tv_char)
_0_ITC._tc_Stage = omniORB.tcInternal.createTypeCode(_0_ITC._ad_Stage)
omniORB.registerType(Stage._NP_RepositoryId, _0_ITC._ad_Stage, _0_ITC._tc_Stage)
del Stage
_0_ITC.PTV_DYNAMIC = "D"
_0_ITC.PTV_STATIC = "s"
_0_ITC.MCS_RELEASE = "R"
_0_ITC.UV_GS_RECEIVE = "G"
_0_ITC.UV_GS_UPLINK = "T"
_0_ITC.UV_ONB_ACCEPT = "O"
_0_ITC.EV_APP_ACCEPT = "A"
_0_ITC.EV_START_EXEC = "S"
_0_ITC.EV_PROGRESS_0 = "0"
_0_ITC.EV_PROGRESS_1 = "1"
_0_ITC.EV_PROGRESS_2 = "2"
_0_ITC.EV_PROGRESS_3 = "3"
_0_ITC.EV_PROGRESS_4 = "4"
_0_ITC.EV_PROGRESS_5 = "5"
_0_ITC.EV_PROGRESS_6 = "6"
_0_ITC.EV_PROGRESS_7 = "7"
_0_ITC.EV_PROGRESS_8 = "8"
_0_ITC.EV_PROGRESS_9 = "9"
_0_ITC.EV_END_EXEC = "C"

# struct VerifyDetail
_0_ITC.VerifyDetail = omniORB.newEmptyClass()
class VerifyDetail (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC/VerifyDetail:1.0"

    def __init__(self, m_verifyStage, m_stageStatus):
        self.m_verifyStage = m_verifyStage
        self.m_stageStatus = m_stageStatus

_0_ITC.VerifyDetail = VerifyDetail
_0_ITC._d_VerifyDetail  = (omniORB.tcInternal.tv_struct, VerifyDetail, VerifyDetail._NP_RepositoryId, "VerifyDetail", "m_verifyStage", omniORB.typeMapping["IDL:ITC/Stage:1.0"], "m_stageStatus", omniORB.typeMapping["IDL:ITC/CEVstageStatus:1.0"])
_0_ITC._tc_VerifyDetail = omniORB.tcInternal.createTypeCode(_0_ITC._d_VerifyDetail)
omniORB.registerType(VerifyDetail._NP_RepositoryId, _0_ITC._d_VerifyDetail, _0_ITC._tc_VerifyDetail)
del VerifyDetail

# typedef ... VerifyDetails
class VerifyDetails:
    _NP_RepositoryId = "IDL:ITC/VerifyDetails:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.VerifyDetails = VerifyDetails
_0_ITC._d_VerifyDetails  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/VerifyDetail:1.0"], 0)
_0_ITC._ad_VerifyDetails = (omniORB.tcInternal.tv_alias, VerifyDetails._NP_RepositoryId, "VerifyDetails", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/VerifyDetail:1.0"], 0))
_0_ITC._tc_VerifyDetails = omniORB.tcInternal.createTypeCode(_0_ITC._ad_VerifyDetails)
omniORB.registerType(VerifyDetails._NP_RepositoryId, _0_ITC._ad_VerifyDetails, _0_ITC._tc_VerifyDetails)
del VerifyDetails

# struct CommandParam
_0_ITC.CommandParam = omniORB.newEmptyClass()
class CommandParam (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC/CommandParam:1.0"

    def __init__(self, m_name, m_isEngValue, m_unit, m_radix, m_value):
        self.m_name = m_name
        self.m_isEngValue = m_isEngValue
        self.m_unit = m_unit
        self.m_radix = m_radix
        self.m_value = m_value

_0_ITC.CommandParam = CommandParam
_0_ITC._d_CommandParam  = (omniORB.tcInternal.tv_struct, CommandParam, CommandParam._NP_RepositoryId, "CommandParam", "m_name", (omniORB.tcInternal.tv_string,0), "m_isEngValue", omniORB.tcInternal.tv_boolean, "m_unit", (omniORB.tcInternal.tv_string,0), "m_radix", omniORB.typeMapping["IDL:IBASE/Radix:1.0"], "m_value", omniORB.typeMapping["IDL:IBASE/Variant:1.0"])
_0_ITC._tc_CommandParam = omniORB.tcInternal.createTypeCode(_0_ITC._d_CommandParam)
omniORB.registerType(CommandParam._NP_RepositoryId, _0_ITC._d_CommandParam, _0_ITC._tc_CommandParam)
del CommandParam

# typedef ... CommandParams
class CommandParams:
    _NP_RepositoryId = "IDL:ITC/CommandParams:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.CommandParams = CommandParams
_0_ITC._d_CommandParams  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/CommandParam:1.0"], 0)
_0_ITC._ad_CommandParams = (omniORB.tcInternal.tv_alias, CommandParams._NP_RepositoryId, "CommandParams", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/CommandParam:1.0"], 0))
_0_ITC._tc_CommandParams = omniORB.tcInternal.createTypeCode(_0_ITC._ad_CommandParams)
omniORB.registerType(CommandParams._NP_RepositoryId, _0_ITC._ad_CommandParams, _0_ITC._tc_CommandParams)
del CommandParams

# struct RequestID
_0_ITC.RequestID = omniORB.newEmptyClass()
class RequestID (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC/RequestID:1.0"

    def __init__(self, m_id, m_elemIndex):
        self.m_id = m_id
        self.m_elemIndex = m_elemIndex

_0_ITC.RequestID = RequestID
_0_ITC._d_RequestID  = (omniORB.tcInternal.tv_struct, RequestID, RequestID._NP_RepositoryId, "RequestID", "m_id", omniORB.tcInternal.tv_ulong, "m_elemIndex", omniORB.tcInternal.tv_ushort)
_0_ITC._tc_RequestID = omniORB.tcInternal.createTypeCode(_0_ITC._d_RequestID)
omniORB.registerType(RequestID._NP_RepositoryId, _0_ITC._d_RequestID, _0_ITC._tc_RequestID)
del RequestID

# typedef ... ServiceMode
class ServiceMode:
    _NP_RepositoryId = "IDL:ITC/ServiceMode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.ServiceMode = ServiceMode
_0_ITC._d_ServiceMode  = omniORB.tcInternal.tv_char
_0_ITC._ad_ServiceMode = (omniORB.tcInternal.tv_alias, ServiceMode._NP_RepositoryId, "ServiceMode", omniORB.tcInternal.tv_char)
_0_ITC._tc_ServiceMode = omniORB.tcInternal.createTypeCode(_0_ITC._ad_ServiceMode)
omniORB.registerType(ServiceMode._NP_RepositoryId, _0_ITC._ad_ServiceMode, _0_ITC._tc_ServiceMode)
del ServiceMode
_0_ITC.SM_PKT = "P"
_0_ITC.SM_CLTU = "C"
_0_ITC.SM_UNDEFINED = " "

# typedef ... TransmissionMode
class TransmissionMode:
    _NP_RepositoryId = "IDL:ITC/TransmissionMode:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.TransmissionMode = TransmissionMode
_0_ITC._d_TransmissionMode  = omniORB.tcInternal.tv_char
_0_ITC._ad_TransmissionMode = (omniORB.tcInternal.tv_alias, TransmissionMode._NP_RepositoryId, "TransmissionMode", omniORB.tcInternal.tv_char)
_0_ITC._tc_TransmissionMode = omniORB.tcInternal.createTypeCode(_0_ITC._ad_TransmissionMode)
omniORB.registerType(TransmissionMode._NP_RepositoryId, _0_ITC._ad_TransmissionMode, _0_ITC._tc_TransmissionMode)
del TransmissionMode
_0_ITC.TM_AD = "A"
_0_ITC.TM_BD = "B"
_0_ITC.TM_UNDEFINED = " "

# typedef ... FrameType
class FrameType:
    _NP_RepositoryId = "IDL:ITC/FrameType:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.FrameType = FrameType
_0_ITC._d_FrameType  = omniORB.tcInternal.tv_char
_0_ITC._ad_FrameType = (omniORB.tcInternal.tv_alias, FrameType._NP_RepositoryId, "FrameType", omniORB.tcInternal.tv_char)
_0_ITC._tc_FrameType = omniORB.tcInternal.createTypeCode(_0_ITC._ad_FrameType)
omniORB.registerType(FrameType._NP_RepositoryId, _0_ITC._ad_FrameType, _0_ITC._tc_FrameType)
del FrameType
_0_ITC.FT_AD_FRAME = "A"
_0_ITC.FT_BD_FRAME = "B"
_0_ITC.FT_BC_FRAME = "C"
_0_ITC.FT_UNDEFINED = " "

# typedef ... TCrequestID
class TCrequestID:
    _NP_RepositoryId = "IDL:ITC/TCrequestID:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.TCrequestID = TCrequestID
_0_ITC._d_TCrequestID  = omniORB.tcInternal.tv_ulong
_0_ITC._ad_TCrequestID = (omniORB.tcInternal.tv_alias, TCrequestID._NP_RepositoryId, "TCrequestID", omniORB.tcInternal.tv_ulong)
_0_ITC._tc_TCrequestID = omniORB.tcInternal.createTypeCode(_0_ITC._ad_TCrequestID)
omniORB.registerType(TCrequestID._NP_RepositoryId, _0_ITC._ad_TCrequestID, _0_ITC._tc_TCrequestID)
del TCrequestID

# struct TransmissionFilter
_0_ITC.TransmissionFilter = omniORB.newEmptyClass()
class TransmissionFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC/TransmissionFilter:1.0"

    def __init__(self, m_transmitData, m_transmitPacketHeader, m_transmitPacketHeaderRawData, m_transmitPacketBodyRawData):
        self.m_transmitData = m_transmitData
        self.m_transmitPacketHeader = m_transmitPacketHeader
        self.m_transmitPacketHeaderRawData = m_transmitPacketHeaderRawData
        self.m_transmitPacketBodyRawData = m_transmitPacketBodyRawData

_0_ITC.TransmissionFilter = TransmissionFilter
_0_ITC._d_TransmissionFilter  = (omniORB.tcInternal.tv_struct, TransmissionFilter, TransmissionFilter._NP_RepositoryId, "TransmissionFilter", "m_transmitData", omniORB.tcInternal.tv_boolean, "m_transmitPacketHeader", omniORB.tcInternal.tv_boolean, "m_transmitPacketHeaderRawData", omniORB.tcInternal.tv_boolean, "m_transmitPacketBodyRawData", omniORB.tcInternal.tv_boolean)
_0_ITC._tc_TransmissionFilter = omniORB.tcInternal.createTypeCode(_0_ITC._d_TransmissionFilter)
omniORB.registerType(TransmissionFilter._NP_RepositoryId, _0_ITC._d_TransmissionFilter, _0_ITC._tc_TransmissionFilter)
del TransmissionFilter

# struct PacketHeader
_0_ITC.PacketHeader = omniORB.newEmptyClass()
class PacketHeader (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC/PacketHeader:1.0"

    def __init__(self, m_commonHeader, m_UplinkTime, m_ExecutionTime, m_LastUpdateTime, m_RequestId, m_RequestElemIndex, m_VarHdrSize, m_PUSapid, m_PUSsrcSeqCount, m_PUSserviceType, m_PUSserviceSubType, m_PUSackFlags, m_UplinkFlag, m_CmdSourceHost, m_CmdSourceType, m_highPriority, m_mapId, m_group, m_block, m_requestSize, m_requestType, m_serviceMode, m_transmissionMode, m_vcId, m_frameType, m_frameCount):
        self.m_commonHeader = m_commonHeader
        self.m_UplinkTime = m_UplinkTime
        self.m_ExecutionTime = m_ExecutionTime
        self.m_LastUpdateTime = m_LastUpdateTime
        self.m_RequestId = m_RequestId
        self.m_RequestElemIndex = m_RequestElemIndex
        self.m_VarHdrSize = m_VarHdrSize
        self.m_PUSapid = m_PUSapid
        self.m_PUSsrcSeqCount = m_PUSsrcSeqCount
        self.m_PUSserviceType = m_PUSserviceType
        self.m_PUSserviceSubType = m_PUSserviceSubType
        self.m_PUSackFlags = m_PUSackFlags
        self.m_UplinkFlag = m_UplinkFlag
        self.m_CmdSourceHost = m_CmdSourceHost
        self.m_CmdSourceType = m_CmdSourceType
        self.m_highPriority = m_highPriority
        self.m_mapId = m_mapId
        self.m_group = m_group
        self.m_block = m_block
        self.m_requestSize = m_requestSize
        self.m_requestType = m_requestType
        self.m_serviceMode = m_serviceMode
        self.m_transmissionMode = m_transmissionMode
        self.m_vcId = m_vcId
        self.m_frameType = m_frameType
        self.m_frameCount = m_frameCount

_0_ITC.PacketHeader = PacketHeader
_0_ITC._d_PacketHeader  = (omniORB.tcInternal.tv_struct, PacketHeader, PacketHeader._NP_RepositoryId, "PacketHeader", "m_commonHeader", omniORB.typeMapping["IDL:IBASE/CommonPktHeader:1.0"], "m_UplinkTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_ExecutionTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_LastUpdateTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_RequestId", omniORB.tcInternal.tv_ulong, "m_RequestElemIndex", omniORB.tcInternal.tv_ushort, "m_VarHdrSize", omniORB.tcInternal.tv_ushort, "m_PUSapid", omniORB.tcInternal.tv_ushort, "m_PUSsrcSeqCount", omniORB.tcInternal.tv_ushort, "m_PUSserviceType", omniORB.tcInternal.tv_octet, "m_PUSserviceSubType", omniORB.tcInternal.tv_octet, "m_PUSackFlags", omniORB.tcInternal.tv_octet, "m_UplinkFlag", omniORB.tcInternal.tv_octet, "m_CmdSourceHost", omniORB.tcInternal.tv_octet, "m_CmdSourceType", omniORB.tcInternal.tv_octet, "m_highPriority", omniORB.tcInternal.tv_boolean, "m_mapId", omniORB.tcInternal.tv_char, "m_group", omniORB.tcInternal.tv_boolean, "m_block", omniORB.tcInternal.tv_boolean, "m_requestSize", omniORB.tcInternal.tv_ulong, "m_requestType", (omniORB.tcInternal.tv_string,0), "m_serviceMode", omniORB.typeMapping["IDL:ITC/ServiceMode:1.0"], "m_transmissionMode", omniORB.typeMapping["IDL:ITC/TransmissionMode:1.0"], "m_vcId", omniORB.tcInternal.tv_char, "m_frameType", omniORB.typeMapping["IDL:ITC/FrameType:1.0"], "m_frameCount", omniORB.tcInternal.tv_ulong)
_0_ITC._tc_PacketHeader = omniORB.tcInternal.createTypeCode(_0_ITC._d_PacketHeader)
omniORB.registerType(PacketHeader._NP_RepositoryId, _0_ITC._d_PacketHeader, _0_ITC._tc_PacketHeader)
del PacketHeader

# typedef ... PacketHeaders
class PacketHeaders:
    _NP_RepositoryId = "IDL:ITC/PacketHeaders:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.PacketHeaders = PacketHeaders
_0_ITC._d_PacketHeaders  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/PacketHeader:1.0"], 0)
_0_ITC._ad_PacketHeaders = (omniORB.tcInternal.tv_alias, PacketHeaders._NP_RepositoryId, "PacketHeaders", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/PacketHeader:1.0"], 0))
_0_ITC._tc_PacketHeaders = omniORB.tcInternal.createTypeCode(_0_ITC._ad_PacketHeaders)
omniORB.registerType(PacketHeaders._NP_RepositoryId, _0_ITC._ad_PacketHeaders, _0_ITC._tc_PacketHeaders)
del PacketHeaders

# struct PacketData
_0_ITC.PacketData = omniORB.newEmptyClass()
class PacketData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC/PacketData:1.0"

    def __init__(self, m_pktHeader, m_pktHeaderRawData, m_pktBodyRawData):
        self.m_pktHeader = m_pktHeader
        self.m_pktHeaderRawData = m_pktHeaderRawData
        self.m_pktBodyRawData = m_pktBodyRawData

_0_ITC.PacketData = PacketData
_0_ITC._d_PacketData  = (omniORB.tcInternal.tv_struct, PacketData, PacketData._NP_RepositoryId, "PacketData", "m_pktHeader", omniORB.typeMapping["IDL:ITC/PacketHeaders:1.0"], "m_pktHeaderRawData", omniORB.typeMapping["IDL:IBASE/ByteString:1.0"], "m_pktBodyRawData", omniORB.typeMapping["IDL:IBASE/ByteString:1.0"])
_0_ITC._tc_PacketData = omniORB.tcInternal.createTypeCode(_0_ITC._d_PacketData)
omniORB.registerType(PacketData._NP_RepositoryId, _0_ITC._d_PacketData, _0_ITC._tc_PacketData)
del PacketData

# typedef ... PacketDatas
class PacketDatas:
    _NP_RepositoryId = "IDL:ITC/PacketDatas:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.PacketDatas = PacketDatas
_0_ITC._d_PacketDatas  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/PacketData:1.0"], 0)
_0_ITC._ad_PacketDatas = (omniORB.tcInternal.tv_alias, PacketDatas._NP_RepositoryId, "PacketDatas", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/PacketData:1.0"], 0))
_0_ITC._tc_PacketDatas = omniORB.tcInternal.createTypeCode(_0_ITC._ad_PacketDatas)
omniORB.registerType(PacketDatas._NP_RepositoryId, _0_ITC._ad_PacketDatas, _0_ITC._tc_PacketDatas)
del PacketDatas

# struct CommandValue
_0_ITC.CommandValue = omniORB.newEmptyClass()
class CommandValue (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC/CommandValue:1.0"

    def __init__(self, m_name, m_releaseTime, m_executionTime, m_lastUpdateTime, m_sourceName, m_sourceType, m_subsystem, m_requestId, m_sequenceName, m_flags, m_ttObqStatus, m_interlockType, m_interlockStage, m_staticPTVstatus, m_dynamicPTVstatus, m_cevStatus, m_verifyDetails, m_parameters, m_rawData, m_tcRequestID, m_tcPktDataIndex):
        self.m_name = m_name
        self.m_releaseTime = m_releaseTime
        self.m_executionTime = m_executionTime
        self.m_lastUpdateTime = m_lastUpdateTime
        self.m_sourceName = m_sourceName
        self.m_sourceType = m_sourceType
        self.m_subsystem = m_subsystem
        self.m_requestId = m_requestId
        self.m_sequenceName = m_sequenceName
        self.m_flags = m_flags
        self.m_ttObqStatus = m_ttObqStatus
        self.m_interlockType = m_interlockType
        self.m_interlockStage = m_interlockStage
        self.m_staticPTVstatus = m_staticPTVstatus
        self.m_dynamicPTVstatus = m_dynamicPTVstatus
        self.m_cevStatus = m_cevStatus
        self.m_verifyDetails = m_verifyDetails
        self.m_parameters = m_parameters
        self.m_rawData = m_rawData
        self.m_tcRequestID = m_tcRequestID
        self.m_tcPktDataIndex = m_tcPktDataIndex

_0_ITC.CommandValue = CommandValue
_0_ITC._d_CommandValue  = (omniORB.tcInternal.tv_struct, CommandValue, CommandValue._NP_RepositoryId, "CommandValue", "m_name", (omniORB.tcInternal.tv_string,0), "m_releaseTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_executionTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_lastUpdateTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_sourceName", (omniORB.tcInternal.tv_string,0), "m_sourceType", omniORB.typeMapping["IDL:ITC/SourceType:1.0"], "m_subsystem", (omniORB.tcInternal.tv_string,0), "m_requestId", omniORB.typeMapping["IDL:ITC/RequestID:1.0"], "m_sequenceName", (omniORB.tcInternal.tv_string,0), "m_flags", omniORB.typeMapping["IDL:ITC/CommandFlags:1.0"], "m_ttObqStatus", omniORB.typeMapping["IDL:ITC/TimeTaggedRqstObqStatus:1.0"], "m_interlockType", omniORB.typeMapping["IDL:ITC/InterlockType:1.0"], "m_interlockStage", omniORB.typeMapping["IDL:ITC/Stage:1.0"], "m_staticPTVstatus", omniORB.typeMapping["IDL:ITC/CheckStateType:1.0"], "m_dynamicPTVstatus", omniORB.typeMapping["IDL:ITC/CheckStateType:1.0"], "m_cevStatus", omniORB.typeMapping["IDL:ITC/CheckStateType:1.0"], "m_verifyDetails", omniORB.typeMapping["IDL:ITC/VerifyDetails:1.0"], "m_parameters", omniORB.typeMapping["IDL:ITC/CommandParams:1.0"], "m_rawData", omniORB.typeMapping["IDL:IBASE/ByteString:1.0"], "m_tcRequestID", omniORB.typeMapping["IDL:ITC/TCrequestID:1.0"], "m_tcPktDataIndex", omniORB.tcInternal.tv_long)
_0_ITC._tc_CommandValue = omniORB.tcInternal.createTypeCode(_0_ITC._d_CommandValue)
omniORB.registerType(CommandValue._NP_RepositoryId, _0_ITC._d_CommandValue, _0_ITC._tc_CommandValue)
del CommandValue

# typedef ... CommandValues
class CommandValues:
    _NP_RepositoryId = "IDL:ITC/CommandValues:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_ITC.CommandValues = CommandValues
_0_ITC._d_CommandValues  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/CommandValue:1.0"], 0)
_0_ITC._ad_CommandValues = (omniORB.tcInternal.tv_alias, CommandValues._NP_RepositoryId, "CommandValues", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:ITC/CommandValue:1.0"], 0))
_0_ITC._tc_CommandValues = omniORB.tcInternal.createTypeCode(_0_ITC._ad_CommandValues)
omniORB.registerType(CommandValues._NP_RepositoryId, _0_ITC._ad_CommandValues, _0_ITC._tc_CommandValues)
del CommandValues

# struct CommandNotifyData
_0_ITC.CommandNotifyData = omniORB.newEmptyClass()
class CommandNotifyData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC/CommandNotifyData:1.0"

    def __init__(self, m_commands, m_pktData):
        self.m_commands = m_commands
        self.m_pktData = m_pktData

_0_ITC.CommandNotifyData = CommandNotifyData
_0_ITC._d_CommandNotifyData  = (omniORB.tcInternal.tv_struct, CommandNotifyData, CommandNotifyData._NP_RepositoryId, "CommandNotifyData", "m_commands", omniORB.typeMapping["IDL:ITC/CommandValues:1.0"], "m_pktData", omniORB.typeMapping["IDL:ITC/PacketDatas:1.0"])
_0_ITC._tc_CommandNotifyData = omniORB.tcInternal.createTypeCode(_0_ITC._d_CommandNotifyData)
omniORB.registerType(CommandNotifyData._NP_RepositoryId, _0_ITC._d_CommandNotifyData, _0_ITC._tc_CommandNotifyData)
del CommandNotifyData

# struct CommandFilter
_0_ITC.CommandFilter = omniORB.newEmptyClass()
class CommandFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:ITC/CommandFilter:1.0"

    def __init__(self, m_releaseTimeOrder, m_enableVerifyDetails, m_enableParameters, m_enableRawData, m_name, m_sourceName, m_sourceType, m_subsystem, m_sequenceName, m_verifyDetails):
        self.m_releaseTimeOrder = m_releaseTimeOrder
        self.m_enableVerifyDetails = m_enableVerifyDetails
        self.m_enableParameters = m_enableParameters
        self.m_enableRawData = m_enableRawData
        self.m_name = m_name
        self.m_sourceName = m_sourceName
        self.m_sourceType = m_sourceType
        self.m_subsystem = m_subsystem
        self.m_sequenceName = m_sequenceName
        self.m_verifyDetails = m_verifyDetails

_0_ITC.CommandFilter = CommandFilter
_0_ITC._d_CommandFilter  = (omniORB.tcInternal.tv_struct, CommandFilter, CommandFilter._NP_RepositoryId, "CommandFilter", "m_releaseTimeOrder", omniORB.tcInternal.tv_boolean, "m_enableVerifyDetails", omniORB.tcInternal.tv_boolean, "m_enableParameters", omniORB.tcInternal.tv_boolean, "m_enableRawData", omniORB.tcInternal.tv_boolean, "m_name", (omniORB.tcInternal.tv_string,0), "m_sourceName", (omniORB.tcInternal.tv_string,0), "m_sourceType", omniORB.typeMapping["IDL:ITC/SourceType:1.0"], "m_subsystem", (omniORB.tcInternal.tv_string,0), "m_sequenceName", (omniORB.tcInternal.tv_string,0), "m_verifyDetails", omniORB.typeMapping["IDL:ITC/VerifyDetails:1.0"])
_0_ITC._tc_CommandFilter = omniORB.tcInternal.createTypeCode(_0_ITC._d_CommandFilter)
omniORB.registerType(CommandFilter._NP_RepositoryId, _0_ITC._d_CommandFilter, _0_ITC._tc_CommandFilter)
del CommandFilter

#
# End of module "ITC"
#
__name__ = "ITC_idl"

_exported_modules = ( "ITC", )

# The end.

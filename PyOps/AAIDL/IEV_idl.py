# Python stubs generated by omniidl from IEV.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "IBASE.idl"
import IBASE_idl
_0_IBASE = omniORB.openModule("IBASE")
_0_IBASE__POA = omniORB.openModule("IBASE__POA")

# #include "ITM.idl"
import ITM_idl
_0_ITM = omniORB.openModule("ITM")
_0_ITM__POA = omniORB.openModule("ITM__POA")

#
# Start of module "IEV"
#
__name__ = "IEV"
_0_IEV = omniORB.openModule("IEV", r"IEV.idl")
_0_IEV__POA = omniORB.openModule("IEV__POA", r"IEV.idl")


# typedef ... Scope
class Scope:
    _NP_RepositoryId = "IDL:IEV/Scope:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_IEV.Scope = Scope
_0_IEV._d_Scope  = omniORB.tcInternal.tv_octet
_0_IEV._ad_Scope = (omniORB.tcInternal.tv_alias, Scope._NP_RepositoryId, "Scope", omniORB.tcInternal.tv_octet)
_0_IEV._tc_Scope = omniORB.tcInternal.createTypeCode(_0_IEV._ad_Scope)
omniORB.registerType(Scope._NP_RepositoryId, _0_IEV._ad_Scope, _0_IEV._tc_Scope)
del Scope
_0_IEV.SYSTEM = 1
_0_IEV.SOFTWARE = 2
_0_IEV.MIB = 4
_0_IEV.LOG = 8

# typedef ... Severity
class Severity:
    _NP_RepositoryId = "IDL:IEV/Severity:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_IEV.Severity = Severity
_0_IEV._d_Severity  = omniORB.tcInternal.tv_octet
_0_IEV._ad_Severity = (omniORB.tcInternal.tv_alias, Severity._NP_RepositoryId, "Severity", omniORB.tcInternal.tv_octet)
_0_IEV._tc_Severity = omniORB.tcInternal.createTypeCode(_0_IEV._ad_Severity)
omniORB.registerType(Severity._NP_RepositoryId, _0_IEV._ad_Severity, _0_IEV._tc_Severity)
del Severity
_0_IEV.WARNING = 1
_0_IEV.ERROR = 2
_0_IEV.FATAL = 4
_0_IEV.INFORMATION = 8

# struct Event
_0_IEV.Event = omniORB.newEmptyClass()
class Event (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/Event:1.0"

    def __init__(self, m_id, m_message, m_application, m_workstation, m_scope, m_severity, m_dataStreamID, m_spacecraft):
        self.m_id = m_id
        self.m_message = m_message
        self.m_application = m_application
        self.m_workstation = m_workstation
        self.m_scope = m_scope
        self.m_severity = m_severity
        self.m_dataStreamID = m_dataStreamID
        self.m_spacecraft = m_spacecraft

_0_IEV.Event = Event
_0_IEV._d_Event  = (omniORB.tcInternal.tv_struct, Event, Event._NP_RepositoryId, "Event", "m_id", (omniORB.tcInternal.tv_string,0), "m_message", (omniORB.tcInternal.tv_string,0), "m_application", (omniORB.tcInternal.tv_string,0), "m_workstation", (omniORB.tcInternal.tv_string,0), "m_scope", omniORB.typeMapping["IDL:IEV/Scope:1.0"], "m_severity", omniORB.typeMapping["IDL:IEV/Severity:1.0"], "m_dataStreamID", omniORB.tcInternal.tv_long, "m_spacecraft", (omniORB.tcInternal.tv_string,0))
_0_IEV._tc_Event = omniORB.tcInternal.createTypeCode(_0_IEV._d_Event)
omniORB.registerType(Event._NP_RepositoryId, _0_IEV._d_Event, _0_IEV._tc_Event)
del Event

# typedef ... Events
class Events:
    _NP_RepositoryId = "IDL:IEV/Events:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_IEV.Events = Events
_0_IEV._d_Events  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/Event:1.0"], 0)
_0_IEV._ad_Events = (omniORB.tcInternal.tv_alias, Events._NP_RepositoryId, "Events", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/Event:1.0"], 0))
_0_IEV._tc_Events = omniORB.tcInternal.createTypeCode(_0_IEV._ad_Events)
omniORB.registerType(Events._NP_RepositoryId, _0_IEV._ad_Events, _0_IEV._tc_Events)
del Events

# struct TransmissionFilter
_0_IEV.TransmissionFilter = omniORB.newEmptyClass()
class TransmissionFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/TransmissionFilter:1.0"

    def __init__(self, m_transmitData, m_transmitPacketHeader, m_transmitPacketHeaderRawData, m_transmitPacketBodyRawData):
        self.m_transmitData = m_transmitData
        self.m_transmitPacketHeader = m_transmitPacketHeader
        self.m_transmitPacketHeaderRawData = m_transmitPacketHeaderRawData
        self.m_transmitPacketBodyRawData = m_transmitPacketBodyRawData

_0_IEV.TransmissionFilter = TransmissionFilter
_0_IEV._d_TransmissionFilter  = (omniORB.tcInternal.tv_struct, TransmissionFilter, TransmissionFilter._NP_RepositoryId, "TransmissionFilter", "m_transmitData", omniORB.tcInternal.tv_boolean, "m_transmitPacketHeader", omniORB.tcInternal.tv_boolean, "m_transmitPacketHeaderRawData", omniORB.tcInternal.tv_boolean, "m_transmitPacketBodyRawData", omniORB.tcInternal.tv_boolean)
_0_IEV._tc_TransmissionFilter = omniORB.tcInternal.createTypeCode(_0_IEV._d_TransmissionFilter)
omniORB.registerType(TransmissionFilter._NP_RepositoryId, _0_IEV._d_TransmissionFilter, _0_IEV._tc_TransmissionFilter)
del TransmissionFilter

# struct PacketHeader
_0_IEV.PacketHeader = omniORB.newEmptyClass()
class PacketHeader (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/PacketHeader:1.0"

    def __init__(self, m_commonHeader):
        self.m_commonHeader = m_commonHeader

_0_IEV.PacketHeader = PacketHeader
_0_IEV._d_PacketHeader  = (omniORB.tcInternal.tv_struct, PacketHeader, PacketHeader._NP_RepositoryId, "PacketHeader", "m_commonHeader", omniORB.typeMapping["IDL:IBASE/CommonPktHeader:1.0"])
_0_IEV._tc_PacketHeader = omniORB.tcInternal.createTypeCode(_0_IEV._d_PacketHeader)
omniORB.registerType(PacketHeader._NP_RepositoryId, _0_IEV._d_PacketHeader, _0_IEV._tc_PacketHeader)
del PacketHeader

# typedef ... PacketHeaders
class PacketHeaders:
    _NP_RepositoryId = "IDL:IEV/PacketHeaders:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_IEV.PacketHeaders = PacketHeaders
_0_IEV._d_PacketHeaders  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/PacketHeader:1.0"], 0)
_0_IEV._ad_PacketHeaders = (omniORB.tcInternal.tv_alias, PacketHeaders._NP_RepositoryId, "PacketHeaders", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/PacketHeader:1.0"], 0))
_0_IEV._tc_PacketHeaders = omniORB.tcInternal.createTypeCode(_0_IEV._ad_PacketHeaders)
omniORB.registerType(PacketHeaders._NP_RepositoryId, _0_IEV._ad_PacketHeaders, _0_IEV._tc_PacketHeaders)
del PacketHeaders

# struct PacketData
_0_IEV.PacketData = omniORB.newEmptyClass()
class PacketData (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/PacketData:1.0"

    def __init__(self, m_pktHeader, m_pktHeaderRawData, m_pktBodyRawData):
        self.m_pktHeader = m_pktHeader
        self.m_pktHeaderRawData = m_pktHeaderRawData
        self.m_pktBodyRawData = m_pktBodyRawData

_0_IEV.PacketData = PacketData
_0_IEV._d_PacketData  = (omniORB.tcInternal.tv_struct, PacketData, PacketData._NP_RepositoryId, "PacketData", "m_pktHeader", omniORB.typeMapping["IDL:IEV/PacketHeaders:1.0"], "m_pktHeaderRawData", omniORB.typeMapping["IDL:IBASE/ByteString:1.0"], "m_pktBodyRawData", omniORB.typeMapping["IDL:IBASE/ByteString:1.0"])
_0_IEV._tc_PacketData = omniORB.tcInternal.createTypeCode(_0_IEV._d_PacketData)
omniORB.registerType(PacketData._NP_RepositoryId, _0_IEV._d_PacketData, _0_IEV._tc_PacketData)
del PacketData

# typedef ... PacketDatas
class PacketDatas:
    _NP_RepositoryId = "IDL:IEV/PacketDatas:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_IEV.PacketDatas = PacketDatas
_0_IEV._d_PacketDatas  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/PacketData:1.0"], 0)
_0_IEV._ad_PacketDatas = (omniORB.tcInternal.tv_alias, PacketDatas._NP_RepositoryId, "PacketDatas", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/PacketData:1.0"], 0))
_0_IEV._tc_PacketDatas = omniORB.tcInternal.createTypeCode(_0_IEV._ad_PacketDatas)
omniORB.registerType(PacketDatas._NP_RepositoryId, _0_IEV._ad_PacketDatas, _0_IEV._tc_PacketDatas)
del PacketDatas

# struct RaisedEvent
_0_IEV.RaisedEvent = omniORB.newEmptyClass()
class RaisedEvent (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/RaisedEvent:1.0"

    def __init__(self, m_time, m_event, m_pktDataIndex):
        self.m_time = m_time
        self.m_event = m_event
        self.m_pktDataIndex = m_pktDataIndex

_0_IEV.RaisedEvent = RaisedEvent
_0_IEV._d_RaisedEvent  = (omniORB.tcInternal.tv_struct, RaisedEvent, RaisedEvent._NP_RepositoryId, "RaisedEvent", "m_time", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_event", omniORB.typeMapping["IDL:IEV/Event:1.0"], "m_pktDataIndex", omniORB.tcInternal.tv_long)
_0_IEV._tc_RaisedEvent = omniORB.tcInternal.createTypeCode(_0_IEV._d_RaisedEvent)
omniORB.registerType(RaisedEvent._NP_RepositoryId, _0_IEV._d_RaisedEvent, _0_IEV._tc_RaisedEvent)
del RaisedEvent

# typedef ... RaisedEvents
class RaisedEvents:
    _NP_RepositoryId = "IDL:IEV/RaisedEvents:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_IEV.RaisedEvents = RaisedEvents
_0_IEV._d_RaisedEvents  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/RaisedEvent:1.0"], 0)
_0_IEV._ad_RaisedEvents = (omniORB.tcInternal.tv_alias, RaisedEvents._NP_RepositoryId, "RaisedEvents", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/RaisedEvent:1.0"], 0))
_0_IEV._tc_RaisedEvents = omniORB.tcInternal.createTypeCode(_0_IEV._ad_RaisedEvents)
omniORB.registerType(RaisedEvents._NP_RepositoryId, _0_IEV._ad_RaisedEvents, _0_IEV._tc_RaisedEvents)
del RaisedEvents

# struct EventFilter
_0_IEV.EventFilter = omniORB.newEmptyClass()
class EventFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/EventFilter:1.0"

    def __init__(self, m_id, m_message, m_application, m_workstation, m_scope, m_severity, m_dataStreamIDs, m_spacecraft):
        self.m_id = m_id
        self.m_message = m_message
        self.m_application = m_application
        self.m_workstation = m_workstation
        self.m_scope = m_scope
        self.m_severity = m_severity
        self.m_dataStreamIDs = m_dataStreamIDs
        self.m_spacecraft = m_spacecraft

_0_IEV.EventFilter = EventFilter
_0_IEV._d_EventFilter  = (omniORB.tcInternal.tv_struct, EventFilter, EventFilter._NP_RepositoryId, "EventFilter", "m_id", (omniORB.tcInternal.tv_string,0), "m_message", (omniORB.tcInternal.tv_string,0), "m_application", (omniORB.tcInternal.tv_string,0), "m_workstation", (omniORB.tcInternal.tv_string,0), "m_scope", omniORB.typeMapping["IDL:IEV/Scope:1.0"], "m_severity", omniORB.typeMapping["IDL:IEV/Severity:1.0"], "m_dataStreamIDs", omniORB.typeMapping["IDL:IBASE/Longs:1.0"], "m_spacecraft", (omniORB.tcInternal.tv_string,0))
_0_IEV._tc_EventFilter = omniORB.tcInternal.createTypeCode(_0_IEV._d_EventFilter)
omniORB.registerType(EventFilter._NP_RepositoryId, _0_IEV._d_EventFilter, _0_IEV._tc_EventFilter)
del EventFilter

# struct StatusDetails
_0_IEV.StatusDetails = omniORB.newEmptyClass()
class StatusDetails (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/StatusDetails:1.0"

    def __init__(self, m_state, m_value, m_allowedValues):
        self.m_state = m_state
        self.m_value = m_value
        self.m_allowedValues = m_allowedValues

_0_IEV.StatusDetails = StatusDetails
_0_IEV._d_StatusDetails  = (omniORB.tcInternal.tv_struct, StatusDetails, StatusDetails._NP_RepositoryId, "StatusDetails", "m_state", omniORB.typeMapping["IDL:ITM/OOLstate:1.0"], "m_value", omniORB.typeMapping["IDL:IBASE/Variant:1.0"], "m_allowedValues", omniORB.typeMapping["IDL:IBASE/Variants:1.0"])
_0_IEV._tc_StatusDetails = omniORB.tcInternal.createTypeCode(_0_IEV._d_StatusDetails)
omniORB.registerType(StatusDetails._NP_RepositoryId, _0_IEV._d_StatusDetails, _0_IEV._tc_StatusDetails)
del StatusDetails

# struct LimitDetails
_0_IEV.LimitDetails = omniORB.newEmptyClass()
class LimitDetails (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/LimitDetails:1.0"

    def __init__(self, m_state, m_value, m_lowerLimit, m_upperLimit):
        self.m_state = m_state
        self.m_value = m_value
        self.m_lowerLimit = m_lowerLimit
        self.m_upperLimit = m_upperLimit

_0_IEV.LimitDetails = LimitDetails
_0_IEV._d_LimitDetails  = (omniORB.tcInternal.tv_struct, LimitDetails, LimitDetails._NP_RepositoryId, "LimitDetails", "m_state", omniORB.typeMapping["IDL:ITM/OOLstate:1.0"], "m_value", omniORB.typeMapping["IDL:IBASE/Variant:1.0"], "m_lowerLimit", omniORB.typeMapping["IDL:IBASE/Variant:1.0"], "m_upperLimit", omniORB.typeMapping["IDL:IBASE/Variant:1.0"])
_0_IEV._tc_LimitDetails = omniORB.tcInternal.createTypeCode(_0_IEV._d_LimitDetails)
omniORB.registerType(LimitDetails._NP_RepositoryId, _0_IEV._d_LimitDetails, _0_IEV._tc_LimitDetails)
del LimitDetails

# struct SCCdetails
_0_IEV.SCCdetails = omniORB.newEmptyClass()
class SCCdetails (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/SCCdetails:1.0"

    def __init__(self, m_valueEng, m_lowerLimitEng, m_upperLimitEng):
        self.m_valueEng = m_valueEng
        self.m_lowerLimitEng = m_lowerLimitEng
        self.m_upperLimitEng = m_upperLimitEng

_0_IEV.SCCdetails = SCCdetails
_0_IEV._d_SCCdetails  = (omniORB.tcInternal.tv_struct, SCCdetails, SCCdetails._NP_RepositoryId, "SCCdetails", "m_valueEng", omniORB.typeMapping["IDL:IBASE/Variant:1.0"], "m_lowerLimitEng", omniORB.typeMapping["IDL:IBASE/Variant:1.0"], "m_upperLimitEng", omniORB.typeMapping["IDL:IBASE/Variant:1.0"])
_0_IEV._tc_SCCdetails = omniORB.tcInternal.createTypeCode(_0_IEV._d_SCCdetails)
omniORB.registerType(SCCdetails._NP_RepositoryId, _0_IEV._d_SCCdetails, _0_IEV._tc_SCCdetails)
del SCCdetails

# typedef ... OOLtype
class OOLtype:
    _NP_RepositoryId = "IDL:IEV/OOLtype:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_IEV.OOLtype = OOLtype
_0_IEV._d_OOLtype  = omniORB.tcInternal.tv_short
_0_IEV._ad_OOLtype = (omniORB.tcInternal.tv_alias, OOLtype._NP_RepositoryId, "OOLtype", omniORB.tcInternal.tv_short)
_0_IEV._tc_OOLtype = omniORB.tcInternal.createTypeCode(_0_IEV._ad_OOLtype)
omniORB.registerType(OOLtype._NP_RepositoryId, _0_IEV._ad_OOLtype, _0_IEV._tc_OOLtype)
del OOLtype
_0_IEV.LIMIT = 1
_0_IEV.STATE = 2
_0_IEV.STATUS_CONSISTENCY = 4

# union OOLdetails
_0_IEV.OOLdetails = omniORB.newEmptyClass()
class OOLdetails (omniORB.Union):
    _NP_RepositoryId = "IDL:IEV/OOLdetails:1.0"

_0_IEV.OOLdetails = OOLdetails

OOLdetails._m_to_d = {"m_limitDetails": 1, "m_statusDetails": 2, "m_sccDetails": 4}
OOLdetails._d_to_m = {1: "m_limitDetails", 2: "m_statusDetails", 4: "m_sccDetails"}
OOLdetails._def_m  = None
OOLdetails._def_d  = None

_0_IEV._m_OOLdetails  = ((1, "m_limitDetails", omniORB.typeMapping["IDL:IEV/LimitDetails:1.0"]), (2, "m_statusDetails", omniORB.typeMapping["IDL:IEV/StatusDetails:1.0"]), (4, "m_sccDetails", omniORB.typeMapping["IDL:IEV/SCCdetails:1.0"]),)
_0_IEV._d_OOLdetails  = (omniORB.tcInternal.tv_union, OOLdetails, OOLdetails._NP_RepositoryId, "OOLdetails", omniORB.typeMapping["IDL:IEV/OOLtype:1.0"], -1, _0_IEV._m_OOLdetails, None, {1: _0_IEV._m_OOLdetails[0], 2: _0_IEV._m_OOLdetails[1], 4: _0_IEV._m_OOLdetails[2]})
_0_IEV._tc_OOLdetails = omniORB.tcInternal.createTypeCode(_0_IEV._d_OOLdetails)
omniORB.registerType(OOLdetails._NP_RepositoryId, _0_IEV._d_OOLdetails, _0_IEV._tc_OOLdetails)
del OOLdetails

# struct OOLinfo
_0_IEV.OOLinfo = omniORB.newEmptyClass()
class OOLinfo (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/OOLinfo:1.0"

    def __init__(self, m_name, m_oolTime, m_valueTime, m_details, m_pktDataIndex):
        self.m_name = m_name
        self.m_oolTime = m_oolTime
        self.m_valueTime = m_valueTime
        self.m_details = m_details
        self.m_pktDataIndex = m_pktDataIndex

_0_IEV.OOLinfo = OOLinfo
_0_IEV._d_OOLinfo  = (omniORB.tcInternal.tv_struct, OOLinfo, OOLinfo._NP_RepositoryId, "OOLinfo", "m_name", (omniORB.tcInternal.tv_string,0), "m_oolTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_valueTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_details", omniORB.typeMapping["IDL:IEV/OOLdetails:1.0"], "m_pktDataIndex", omniORB.tcInternal.tv_long)
_0_IEV._tc_OOLinfo = omniORB.tcInternal.createTypeCode(_0_IEV._d_OOLinfo)
omniORB.registerType(OOLinfo._NP_RepositoryId, _0_IEV._d_OOLinfo, _0_IEV._tc_OOLinfo)
del OOLinfo

# typedef ... OOLinfos
class OOLinfos:
    _NP_RepositoryId = "IDL:IEV/OOLinfos:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_IEV.OOLinfos = OOLinfos
_0_IEV._d_OOLinfos  = (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/OOLinfo:1.0"], 0)
_0_IEV._ad_OOLinfos = (omniORB.tcInternal.tv_alias, OOLinfos._NP_RepositoryId, "OOLinfos", (omniORB.tcInternal.tv_sequence, omniORB.typeMapping["IDL:IEV/OOLinfo:1.0"], 0))
_0_IEV._tc_OOLinfos = omniORB.tcInternal.createTypeCode(_0_IEV._ad_OOLinfos)
omniORB.registerType(OOLinfos._NP_RepositoryId, _0_IEV._ad_OOLinfos, _0_IEV._tc_OOLinfos)
del OOLinfos

# struct OOLinfoFilter
_0_IEV.OOLinfoFilter = omniORB.newEmptyClass()
class OOLinfoFilter (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/OOLinfoFilter:1.0"

    def __init__(self, m_name, m_type):
        self.m_name = m_name
        self.m_type = m_type

_0_IEV.OOLinfoFilter = OOLinfoFilter
_0_IEV._d_OOLinfoFilter  = (omniORB.tcInternal.tv_struct, OOLinfoFilter, OOLinfoFilter._NP_RepositoryId, "OOLinfoFilter", "m_name", (omniORB.tcInternal.tv_string,0), "m_type", omniORB.typeMapping["IDL:IEV/OOLtype:1.0"])
_0_IEV._tc_OOLinfoFilter = omniORB.tcInternal.createTypeCode(_0_IEV._d_OOLinfoFilter)
omniORB.registerType(OOLinfoFilter._NP_RepositoryId, _0_IEV._d_OOLinfoFilter, _0_IEV._tc_OOLinfoFilter)
del OOLinfoFilter

# struct CombinedEvents
_0_IEV.CombinedEvents = omniORB.newEmptyClass()
class CombinedEvents (omniORB.StructBase):
    _NP_RepositoryId = "IDL:IEV/CombinedEvents:1.0"

    def __init__(self, m_evPktTime, m_events, m_oolInfos, m_pktData):
        self.m_evPktTime = m_evPktTime
        self.m_events = m_events
        self.m_oolInfos = m_oolInfos
        self.m_pktData = m_pktData

_0_IEV.CombinedEvents = CombinedEvents
_0_IEV._d_CombinedEvents  = (omniORB.tcInternal.tv_struct, CombinedEvents, CombinedEvents._NP_RepositoryId, "CombinedEvents", "m_evPktTime", omniORB.typeMapping["IDL:IBASE/Time:1.0"], "m_events", omniORB.typeMapping["IDL:IEV/RaisedEvents:1.0"], "m_oolInfos", omniORB.typeMapping["IDL:IEV/OOLinfos:1.0"], "m_pktData", omniORB.typeMapping["IDL:IEV/PacketDatas:1.0"])
_0_IEV._tc_CombinedEvents = omniORB.tcInternal.createTypeCode(_0_IEV._d_CombinedEvents)
omniORB.registerType(CombinedEvents._NP_RepositoryId, _0_IEV._d_CombinedEvents, _0_IEV._tc_CombinedEvents)
del CombinedEvents

#
# End of module "IEV"
#
__name__ = "IEV_idl"

_exported_modules = ( "IEV", )

# The end.

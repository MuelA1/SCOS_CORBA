# Python stubs generated by omniidl from ITC_PRO.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "IBASE.idl"
import IBASE_idl
_0_IBASE = omniORB.openModule("IBASE")
_0_IBASE__POA = omniORB.openModule("IBASE__POA")

# #include "ITC.idl"
import ITC_idl
_0_ITC = omniORB.openModule("ITC")
_0_ITC__POA = omniORB.openModule("ITC__POA")

# #include "ICLOCK.idl"
import ICLOCK_idl
_0_ICLOCK = omniORB.openModule("ICLOCK")
_0_ICLOCK__POA = omniORB.openModule("ICLOCK__POA")

# #include "IBASE_IF.idl"
import IBASE_IF_idl
_0_IBASE_IF = omniORB.openModule("IBASE_IF")
_0_IBASE_IF__POA = omniORB.openModule("IBASE_IF__POA")

# #include "ICLOCK_PRO.idl"
import ICLOCK_PRO_idl
_0_ICLOCK_PRO = omniORB.openModule("ICLOCK_PRO")
_0_ICLOCK_PRO__POA = omniORB.openModule("ICLOCK_PRO__POA")

#
# Start of module "ITC_PRO"
#
__name__ = "ITC_PRO"
_0_ITC_PRO = omniORB.openModule("ITC_PRO", r"ITC_PRO.idl")
_0_ITC_PRO__POA = omniORB.openModule("ITC_PRO__POA", r"ITC_PRO.idl")


# forward interface CommandMngrView;
_0_ITC_PRO._d_CommandMngrView = (omniORB.tcInternal.tv_objref, "IDL:ITC_PRO/CommandMngrView:1.0", "CommandMngrView")
omniORB.typeMapping["IDL:ITC_PRO/CommandMngrView:1.0"] = _0_ITC_PRO._d_CommandMngrView

# interface CommandMngr
_0_ITC_PRO._d_CommandMngr = (omniORB.tcInternal.tv_objref, "IDL:ITC_PRO/CommandMngr:1.0", "CommandMngr")
omniORB.typeMapping["IDL:ITC_PRO/CommandMngr:1.0"] = _0_ITC_PRO._d_CommandMngr
_0_ITC_PRO.CommandMngr = omniORB.newEmptyClass()
class CommandMngr (_0_IBASE_IF.Model):
    _NP_RepositoryId = _0_ITC_PRO._d_CommandMngr[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ITC_PRO.CommandMngr = CommandMngr
_0_ITC_PRO._tc_CommandMngr = omniORB.tcInternal.createTypeCode(_0_ITC_PRO._d_CommandMngr)
omniORB.registerType(CommandMngr._NP_RepositoryId, _0_ITC_PRO._d_CommandMngr, _0_ITC_PRO._tc_CommandMngr)

# CommandMngr operations and attributes
CommandMngr._d_registerCommands = ((omniORB.typeMapping["IDL:ITC_PRO/CommandMngrView:1.0"], omniORB.typeMapping["IDL:ITC/CommandFilter:1.0"], omniORB.typeMapping["IDL:ITC/TransmissionFilter:1.0"]), (omniORB.tcInternal.tv_long, ), None)
CommandMngr._d_unregisterCommands = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_boolean, ), None)
CommandMngr._d_modifyCommandFilter = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:ITC/CommandFilter:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
CommandMngr._d_modifyTransmissionFilter = ((omniORB.tcInternal.tv_long, omniORB.typeMapping["IDL:ITC/TransmissionFilter:1.0"]), (omniORB.tcInternal.tv_boolean, ), None)
CommandMngr._d_getFullData = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:ITC/CommandNotifyData:1.0"], ), {_0_ICLOCK.NotPossible._NP_RepositoryId: _0_ICLOCK._d_NotPossible})
CommandMngr._d_getNextData = ((omniORB.tcInternal.tv_long, ), (omniORB.typeMapping["IDL:ITC/CommandNotifyData:1.0"], ), {_0_ICLOCK.NotPossible._NP_RepositoryId: _0_ICLOCK._d_NotPossible})

# CommandMngr object reference
class _objref_CommandMngr (_0_IBASE_IF._objref_Model):
    _NP_RepositoryId = CommandMngr._NP_RepositoryId

    def __init__(self, obj):
        _0_IBASE_IF._objref_Model.__init__(self, obj)

    def registerCommands(self, *args):
        return self._obj.invoke("registerCommands", _0_ITC_PRO.CommandMngr._d_registerCommands, args)

    def unregisterCommands(self, *args):
        return self._obj.invoke("unregisterCommands", _0_ITC_PRO.CommandMngr._d_unregisterCommands, args)

    def modifyCommandFilter(self, *args):
        return self._obj.invoke("modifyCommandFilter", _0_ITC_PRO.CommandMngr._d_modifyCommandFilter, args)

    def modifyTransmissionFilter(self, *args):
        return self._obj.invoke("modifyTransmissionFilter", _0_ITC_PRO.CommandMngr._d_modifyTransmissionFilter, args)

    def getFullData(self, *args):
        return self._obj.invoke("getFullData", _0_ITC_PRO.CommandMngr._d_getFullData, args)

    def getNextData(self, *args):
        return self._obj.invoke("getNextData", _0_ITC_PRO.CommandMngr._d_getNextData, args)

omniORB.registerObjref(CommandMngr._NP_RepositoryId, _objref_CommandMngr)
_0_ITC_PRO._objref_CommandMngr = _objref_CommandMngr
del CommandMngr, _objref_CommandMngr

# CommandMngr skeleton
__name__ = "ITC_PRO__POA"
class CommandMngr (_0_IBASE_IF__POA.Model):
    _NP_RepositoryId = _0_ITC_PRO.CommandMngr._NP_RepositoryId


    _omni_op_d = {"registerCommands": _0_ITC_PRO.CommandMngr._d_registerCommands, "unregisterCommands": _0_ITC_PRO.CommandMngr._d_unregisterCommands, "modifyCommandFilter": _0_ITC_PRO.CommandMngr._d_modifyCommandFilter, "modifyTransmissionFilter": _0_ITC_PRO.CommandMngr._d_modifyTransmissionFilter, "getFullData": _0_ITC_PRO.CommandMngr._d_getFullData, "getNextData": _0_ITC_PRO.CommandMngr._d_getNextData}
    _omni_op_d.update(_0_IBASE_IF__POA.Model._omni_op_d)

CommandMngr._omni_skeleton = CommandMngr
_0_ITC_PRO__POA.CommandMngr = CommandMngr
omniORB.registerSkeleton(CommandMngr._NP_RepositoryId, CommandMngr)
del CommandMngr
__name__ = "ITC_PRO"

# interface CommandMngrView
_0_ITC_PRO._d_CommandMngrView = (omniORB.tcInternal.tv_objref, "IDL:ITC_PRO/CommandMngrView:1.0", "CommandMngrView")
omniORB.typeMapping["IDL:ITC_PRO/CommandMngrView:1.0"] = _0_ITC_PRO._d_CommandMngrView
_0_ITC_PRO.CommandMngrView = omniORB.newEmptyClass()
class CommandMngrView (_0_IBASE_IF.View):
    _NP_RepositoryId = _0_ITC_PRO._d_CommandMngrView[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ITC_PRO.CommandMngrView = CommandMngrView
_0_ITC_PRO._tc_CommandMngrView = omniORB.tcInternal.createTypeCode(_0_ITC_PRO._d_CommandMngrView)
omniORB.registerType(CommandMngrView._NP_RepositoryId, _0_ITC_PRO._d_CommandMngrView, _0_ITC_PRO._tc_CommandMngrView)

# CommandMngrView operations and attributes
CommandMngrView._d_notifyCommands = ((omniORB.typeMapping["IDL:ITC/CommandNotifyData:1.0"], ), (), None)

# CommandMngrView object reference
class _objref_CommandMngrView (_0_IBASE_IF._objref_View):
    _NP_RepositoryId = CommandMngrView._NP_RepositoryId

    def __init__(self, obj):
        _0_IBASE_IF._objref_View.__init__(self, obj)

    def notifyCommands(self, *args):
        return self._obj.invoke("notifyCommands", _0_ITC_PRO.CommandMngrView._d_notifyCommands, args)

omniORB.registerObjref(CommandMngrView._NP_RepositoryId, _objref_CommandMngrView)
_0_ITC_PRO._objref_CommandMngrView = _objref_CommandMngrView
del CommandMngrView, _objref_CommandMngrView

# CommandMngrView skeleton
__name__ = "ITC_PRO__POA"
class CommandMngrView (_0_IBASE_IF__POA.View):
    _NP_RepositoryId = _0_ITC_PRO.CommandMngrView._NP_RepositoryId


    _omni_op_d = {"notifyCommands": _0_ITC_PRO.CommandMngrView._d_notifyCommands}
    _omni_op_d.update(_0_IBASE_IF__POA.View._omni_op_d)

CommandMngrView._omni_skeleton = CommandMngrView
_0_ITC_PRO__POA.CommandMngrView = CommandMngrView
omniORB.registerSkeleton(CommandMngrView._NP_RepositoryId, CommandMngrView)
del CommandMngrView
__name__ = "ITC_PRO"

# interface TCserver
_0_ITC_PRO._d_TCserver = (omniORB.tcInternal.tv_objref, "IDL:ITC_PRO/TCserver:1.0", "TCserver")
omniORB.typeMapping["IDL:ITC_PRO/TCserver:1.0"] = _0_ITC_PRO._d_TCserver
_0_ITC_PRO.TCserver = omniORB.newEmptyClass()
class TCserver (_0_ICLOCK_PRO.TimingServer):
    _NP_RepositoryId = _0_ITC_PRO._d_TCserver[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_ITC_PRO.TCserver = TCserver
_0_ITC_PRO._tc_TCserver = omniORB.tcInternal.createTypeCode(_0_ITC_PRO._d_TCserver)
omniORB.registerType(TCserver._NP_RepositoryId, _0_ITC_PRO._d_TCserver, _0_ITC_PRO._tc_TCserver)

# TCserver operations and attributes
TCserver._d__get_m_commandMngr = ((),(omniORB.typeMapping["IDL:ITC_PRO/CommandMngr:1.0"],),None)

# TCserver object reference
class _objref_TCserver (_0_ICLOCK_PRO._objref_TimingServer):
    _NP_RepositoryId = TCserver._NP_RepositoryId

    def __init__(self, obj):
        _0_ICLOCK_PRO._objref_TimingServer.__init__(self, obj)

    def _get_m_commandMngr(self, *args):
        return self._obj.invoke("_get_m_commandMngr", _0_ITC_PRO.TCserver._d__get_m_commandMngr, args)

    m_commandMngr = property(_get_m_commandMngr)


omniORB.registerObjref(TCserver._NP_RepositoryId, _objref_TCserver)
_0_ITC_PRO._objref_TCserver = _objref_TCserver
del TCserver, _objref_TCserver

# TCserver skeleton
__name__ = "ITC_PRO__POA"
class TCserver (_0_ICLOCK_PRO__POA.TimingServer):
    _NP_RepositoryId = _0_ITC_PRO.TCserver._NP_RepositoryId


    _omni_op_d = {"_get_m_commandMngr": _0_ITC_PRO.TCserver._d__get_m_commandMngr}
    _omni_op_d.update(_0_ICLOCK_PRO__POA.TimingServer._omni_op_d)

TCserver._omni_skeleton = TCserver
_0_ITC_PRO__POA.TCserver = TCserver
omniORB.registerSkeleton(TCserver._NP_RepositoryId, TCserver)
del TCserver
__name__ = "ITC_PRO"

# interface TCserverMngr
_0_ITC_PRO._d_TCserverMngr = (omniORB.tcInternal.tv_objref, "IDL:ITC_PRO/TCserverMngr:1.0", "TCserverMngr")
omniORB.typeMapping["IDL:ITC_PRO/TCserverMngr:1.0"] = _0_ITC_PRO._d_TCserverMngr
_0_ITC_PRO.TCserverMngr = omniORB.newEmptyClass()
class TCserverMngr (_0_ICLOCK_PRO.TimingServerMngr):
    _NP_RepositoryId = _0_ITC_PRO._d_TCserverMngr[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil

    ServiceName = "TC_PRO_002"


_0_ITC_PRO.TCserverMngr = TCserverMngr
_0_ITC_PRO._tc_TCserverMngr = omniORB.tcInternal.createTypeCode(_0_ITC_PRO._d_TCserverMngr)
omniORB.registerType(TCserverMngr._NP_RepositoryId, _0_ITC_PRO._d_TCserverMngr, _0_ITC_PRO._tc_TCserverMngr)

# TCserverMngr operations and attributes
TCserverMngr._d_getTCserver = ((omniORB.tcInternal.tv_boolean, ), (omniORB.typeMapping["IDL:ITC_PRO/TCserver:1.0"], ), {_0_IBASE.NotFound._NP_RepositoryId: _0_IBASE._d_NotFound})

# TCserverMngr object reference
class _objref_TCserverMngr (_0_ICLOCK_PRO._objref_TimingServerMngr):
    _NP_RepositoryId = TCserverMngr._NP_RepositoryId

    def __init__(self, obj):
        _0_ICLOCK_PRO._objref_TimingServerMngr.__init__(self, obj)

    def getTCserver(self, *args):
        return self._obj.invoke("getTCserver", _0_ITC_PRO.TCserverMngr._d_getTCserver, args)

omniORB.registerObjref(TCserverMngr._NP_RepositoryId, _objref_TCserverMngr)
_0_ITC_PRO._objref_TCserverMngr = _objref_TCserverMngr
del TCserverMngr, _objref_TCserverMngr

# TCserverMngr skeleton
__name__ = "ITC_PRO__POA"
class TCserverMngr (_0_ICLOCK_PRO__POA.TimingServerMngr):
    _NP_RepositoryId = _0_ITC_PRO.TCserverMngr._NP_RepositoryId


    _omni_op_d = {"getTCserver": _0_ITC_PRO.TCserverMngr._d_getTCserver}
    _omni_op_d.update(_0_ICLOCK_PRO__POA.TimingServerMngr._omni_op_d)

TCserverMngr._omni_skeleton = TCserverMngr
_0_ITC_PRO__POA.TCserverMngr = TCserverMngr
omniORB.registerSkeleton(TCserverMngr._NP_RepositoryId, TCserverMngr)
del TCserverMngr
__name__ = "ITC_PRO"

#
# End of module "ITC_PRO"
#
__name__ = "ITC_PRO_idl"

_exported_modules = ( "ITC_PRO", )

# The end.

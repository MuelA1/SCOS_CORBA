/******************************************************************************/
/*                                                                            */
/* WebRM - Web based Remote Monitoring                                        */
/*                                                                            */
/* (C) 2000 ESA         - European Space Agency                               */
/*          Siemens PSE - Programm and System Engineerin, Austria             */
/*                                                                            */
/******************************************************************************/
#ifndef IBASE_idl
#define IBASE_idl

/**
 * Basic types
 *
 * @version $RCSfile: IBASE.idl,v $ $Revision: 1.11 $ - $Date: 2002/02/08 17:15:43 $ 
 *
 * @author Stefan Korner
 * @author Gerfried Krames
 */
module IBASE
{
    /*********/
    /* Longs */
    /*********/

    /** List of integers */
    typedef sequence<long> Longs;

    /********/
    /* Time */
    /********/

    /**
     * Representing the absolute time (starting from 1.1.1970) or the
     * relative time.
     */
    struct Time
    {
        long m_sec;
        long m_micro;
        boolean m_isDelta;
    };

    /**************/
    /* ByteString */
    /**************/

    /** For transfering binary data */
    typedef sequence<octet> ByteString;

    /***********/
    /* Variant */
    /***********/

    /** discriminator for scalar values */
    typedef char VariantState;
    const char IS_NULL    = '0';
    const char IS_SHORT   = 'i';
    const char IS_LONG    = 'I';
    const char IS_USHORT  = 'u';
    const char IS_ULONG   = 'U';
    const char IS_FLOAT   = 'F';
    const char IS_DOUBLE  = 'D';
    const char IS_CHAR    = 'C';
    const char IS_BOOLEAN = 'B';
    const char IS_OCTET   = 'O';
    const char IS_STRING  = 'S';
    const char IS_BSTRING = 's';
    const char IS_TIME    = 'T';

    /** Representing a scalar value */
    union Variant switch(VariantState)
    {
        case IS_NULL:    boolean m_nullFormat;
        case IS_SHORT:   short m_shortFormat;
        case IS_LONG:    long m_longFormat;
        case IS_USHORT:  unsigned short m_ushortFormat;
        case IS_ULONG:   unsigned long m_ulongFormat;
        case IS_FLOAT:   float m_floatFormat;
        case IS_DOUBLE:  double m_doubleFormat;
        case IS_CHAR:    char m_charFormat;
        case IS_BOOLEAN: boolean m_booleanFormat;
        case IS_OCTET:   octet m_octetFormat;
        case IS_STRING:  string m_stringFormat;
        case IS_BSTRING: ByteString m_bstringFormat;
        case IS_TIME:    Time m_timeFormat;
    };

    /*********/
    /* Radix */
    /*********/

    /** Format for displaying integer values */
    typedef char Radix;
    const char BINARY      = 'B';
    const char OCTAL       = 'O';
    const char DECIMAL     = 'D';
    const char HEXADECIMAL = 'H';

    /*********/
    /* Color */
    /*********/

    /** Color for information at the user interface */

    typedef char Color;
    const char WHITE   = '0';
    const char BLACK   = '1';
    const char GREEN   = '2';
    const char BLUE    = '3';
    const char CYAN    = '4';
    const char ORANGE  = '5';
    const char BROWN   = '6';
    const char MAGENTA = '7';
    const char RED     = '8';
    const char YELLOW  = '9';

    /***********/
    /* Strings */
    /***********/

    /** List of strings (often used) */
    typedef sequence<string> Strings;

    /***************/
    /* StringTable */
    /***************/

    /** List of columns (which are Strings) */
    typedef sequence<Strings> StringTable;

    /************/
    /* Variants */
    /************/

    /** List of variants (often used) */
    typedef sequence<Variant> Variants;

    /************/
    /* NotFound */
    /************/

    /** General exception for information access */
    exception NotFound{};

    /****************/
    /* NotProcessed */
    /****************/

    /** General exception for processing */
    exception NotProcessed
    {
        string m_reason;
    };

  
  /** Required for TM, EV, and TC data provision */
  struct CommonPktHeader
  {
    unsigned short m_needed_byctree;  // always 0
    octet          m_AccessFlag;      // always 0
    octet          m_SimulationFlag;  // always 0
    Time           m_FilingTime;
    Time           m_CreateTime;
    unsigned long  m_CreateId;
    unsigned short m_SpacecraftId;
    unsigned short m_ununsed0;        // always 0
    unsigned long  m_Size;
    octet          m_SIIhdrType;
    octet          m_Version;
    octet          m_unused1;         // always 0
    unsigned short m_StreamId;
    unsigned long  m_SeqCounter;
    unsigned long  m_FilingKey;
    unsigned short m_RetrKey1;
    unsigned short m_RetrKey2;
  };
};

#endif

# Python stubs generated by omniidl from IBASE_IF.idl
# DO NOT EDIT THIS FILE!

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA


_omnipy.checkVersion(4,2, __file__, 1)

try:
    property
except NameError:
    def property(*args):
        return None


# #include "IBASE.idl"
import IBASE_idl
_0_IBASE = omniORB.openModule("IBASE")
_0_IBASE__POA = omniORB.openModule("IBASE__POA")

#
# Start of module "IBASE_IF"
#
__name__ = "IBASE_IF"
_0_IBASE_IF = omniORB.openModule("IBASE_IF", r"IBASE_IF.idl")
_0_IBASE_IF__POA = omniORB.openModule("IBASE_IF__POA", r"IBASE_IF.idl")


# forward interface View;
_0_IBASE_IF._d_View = (omniORB.tcInternal.tv_objref, "IDL:IBASE_IF/View:1.0", "View")
omniORB.typeMapping["IDL:IBASE_IF/View:1.0"] = _0_IBASE_IF._d_View

# interface Model
_0_IBASE_IF._d_Model = (omniORB.tcInternal.tv_objref, "IDL:IBASE_IF/Model:1.0", "Model")
omniORB.typeMapping["IDL:IBASE_IF/Model:1.0"] = _0_IBASE_IF._d_Model
_0_IBASE_IF.Model = omniORB.newEmptyClass()
class Model :
    _NP_RepositoryId = _0_IBASE_IF._d_Model[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_IBASE_IF.Model = Model
_0_IBASE_IF._tc_Model = omniORB.tcInternal.createTypeCode(_0_IBASE_IF._d_Model)
omniORB.registerType(Model._NP_RepositoryId, _0_IBASE_IF._d_Model, _0_IBASE_IF._tc_Model)

# Model operations and attributes
Model._d_unregisterView = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_boolean, ), None)
Model._d_setNotification = ((omniORB.tcInternal.tv_long, omniORB.tcInternal.tv_boolean), (omniORB.tcInternal.tv_boolean, ), None)

# Model object reference
class _objref_Model (CORBA.Object):
    _NP_RepositoryId = Model._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def unregisterView(self, *args):
        return self._obj.invoke("unregisterView", _0_IBASE_IF.Model._d_unregisterView, args)

    def setNotification(self, *args):
        return self._obj.invoke("setNotification", _0_IBASE_IF.Model._d_setNotification, args)

omniORB.registerObjref(Model._NP_RepositoryId, _objref_Model)
_0_IBASE_IF._objref_Model = _objref_Model
del Model, _objref_Model

# Model skeleton
__name__ = "IBASE_IF__POA"
class Model (PortableServer.Servant):
    _NP_RepositoryId = _0_IBASE_IF.Model._NP_RepositoryId


    _omni_op_d = {"unregisterView": _0_IBASE_IF.Model._d_unregisterView, "setNotification": _0_IBASE_IF.Model._d_setNotification}

Model._omni_skeleton = Model
_0_IBASE_IF__POA.Model = Model
omniORB.registerSkeleton(Model._NP_RepositoryId, Model)
del Model
__name__ = "IBASE_IF"

# interface View
_0_IBASE_IF._d_View = (omniORB.tcInternal.tv_objref, "IDL:IBASE_IF/View:1.0", "View")
omniORB.typeMapping["IDL:IBASE_IF/View:1.0"] = _0_IBASE_IF._d_View
_0_IBASE_IF.View = omniORB.newEmptyClass()
class View :
    _NP_RepositoryId = _0_IBASE_IF._d_View[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_IBASE_IF.View = View
_0_IBASE_IF._tc_View = omniORB.tcInternal.createTypeCode(_0_IBASE_IF._d_View)
omniORB.registerType(View._NP_RepositoryId, _0_IBASE_IF._d_View, _0_IBASE_IF._tc_View)

# View operations and attributes
View._d_notifyOverflow = ((), (), None)
View._d_owNotifyOverflow = ((), None, None)

# View object reference
class _objref_View (CORBA.Object):
    _NP_RepositoryId = View._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def notifyOverflow(self, *args):
        return self._obj.invoke("notifyOverflow", _0_IBASE_IF.View._d_notifyOverflow, args)

    def owNotifyOverflow(self, *args):
        return self._obj.invoke("owNotifyOverflow", _0_IBASE_IF.View._d_owNotifyOverflow, args)

omniORB.registerObjref(View._NP_RepositoryId, _objref_View)
_0_IBASE_IF._objref_View = _objref_View
del View, _objref_View

# View skeleton
__name__ = "IBASE_IF__POA"
class View (PortableServer.Servant):
    _NP_RepositoryId = _0_IBASE_IF.View._NP_RepositoryId


    _omni_op_d = {"notifyOverflow": _0_IBASE_IF.View._d_notifyOverflow, "owNotifyOverflow": _0_IBASE_IF.View._d_owNotifyOverflow}

View._omni_skeleton = View
_0_IBASE_IF__POA.View = View
omniORB.registerSkeleton(View._NP_RepositoryId, View)
del View
__name__ = "IBASE_IF"

# interface Server
_0_IBASE_IF._d_Server = (omniORB.tcInternal.tv_objref, "IDL:IBASE_IF/Server:1.0", "Server")
omniORB.typeMapping["IDL:IBASE_IF/Server:1.0"] = _0_IBASE_IF._d_Server
_0_IBASE_IF.Server = omniORB.newEmptyClass()
class Server :
    _NP_RepositoryId = _0_IBASE_IF._d_Server[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_IBASE_IF.Server = Server
_0_IBASE_IF._tc_Server = omniORB.tcInternal.createTypeCode(_0_IBASE_IF._d_Server)
omniORB.registerType(Server._NP_RepositoryId, _0_IBASE_IF._d_Server, _0_IBASE_IF._tc_Server)

# Server operations and attributes
Server._d_lock = ((omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], ), (omniORB.tcInternal.tv_boolean, ), None)
Server._d_unlock = ((), (omniORB.tcInternal.tv_boolean, ), None)
Server._d_unsafeUnlock = ((), None, None)
Server._d_getObject = (((omniORB.tcInternal.tv_string,0), ), (omniORB.typeMapping["IDL:omg.org/CORBA/Object:1.0"], ), {_0_IBASE.NotFound._NP_RepositoryId: _0_IBASE._d_NotFound})

# Server object reference
class _objref_Server (CORBA.Object):
    _NP_RepositoryId = Server._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def lock(self, *args):
        return self._obj.invoke("lock", _0_IBASE_IF.Server._d_lock, args)

    def unlock(self, *args):
        return self._obj.invoke("unlock", _0_IBASE_IF.Server._d_unlock, args)

    def unsafeUnlock(self, *args):
        return self._obj.invoke("unsafeUnlock", _0_IBASE_IF.Server._d_unsafeUnlock, args)

    def getObject(self, *args):
        return self._obj.invoke("getObject", _0_IBASE_IF.Server._d_getObject, args)

omniORB.registerObjref(Server._NP_RepositoryId, _objref_Server)
_0_IBASE_IF._objref_Server = _objref_Server
del Server, _objref_Server

# Server skeleton
__name__ = "IBASE_IF__POA"
class Server (PortableServer.Servant):
    _NP_RepositoryId = _0_IBASE_IF.Server._NP_RepositoryId


    _omni_op_d = {"lock": _0_IBASE_IF.Server._d_lock, "unlock": _0_IBASE_IF.Server._d_unlock, "unsafeUnlock": _0_IBASE_IF.Server._d_unsafeUnlock, "getObject": _0_IBASE_IF.Server._d_getObject}

Server._omni_skeleton = Server
_0_IBASE_IF__POA.Server = Server
omniORB.registerSkeleton(Server._NP_RepositoryId, Server)
del Server
__name__ = "IBASE_IF"

# interface ServerMngr
_0_IBASE_IF._d_ServerMngr = (omniORB.tcInternal.tv_objref, "IDL:IBASE_IF/ServerMngr:1.0", "ServerMngr")
omniORB.typeMapping["IDL:IBASE_IF/ServerMngr:1.0"] = _0_IBASE_IF._d_ServerMngr
_0_IBASE_IF.ServerMngr = omniORB.newEmptyClass()
class ServerMngr :
    _NP_RepositoryId = _0_IBASE_IF._d_ServerMngr[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_IBASE_IF.ServerMngr = ServerMngr
_0_IBASE_IF._tc_ServerMngr = omniORB.tcInternal.createTypeCode(_0_IBASE_IF._d_ServerMngr)
omniORB.registerType(ServerMngr._NP_RepositoryId, _0_IBASE_IF._d_ServerMngr, _0_IBASE_IF._tc_ServerMngr)

# ServerMngr operations and attributes
ServerMngr._d_getServer = ((), (omniORB.typeMapping["IDL:IBASE_IF/Server:1.0"], ), {_0_IBASE.NotFound._NP_RepositoryId: _0_IBASE._d_NotFound})
ServerMngr._d_privateConnect = ((omniORB.typeMapping["IDL:IBASE_IF/Server:1.0"], ), (omniORB.tcInternal.tv_long, ), None)
ServerMngr._d_privateLock = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_boolean, ), None)
ServerMngr._d_privateUnlock = ((omniORB.tcInternal.tv_long, ), (omniORB.tcInternal.tv_boolean, ), None)

# ServerMngr object reference
class _objref_ServerMngr (CORBA.Object):
    _NP_RepositoryId = ServerMngr._NP_RepositoryId

    def __init__(self, obj):
        CORBA.Object.__init__(self, obj)

    def getServer(self, *args):
        return self._obj.invoke("getServer", _0_IBASE_IF.ServerMngr._d_getServer, args)

    def privateConnect(self, *args):
        return self._obj.invoke("privateConnect", _0_IBASE_IF.ServerMngr._d_privateConnect, args)

    def privateLock(self, *args):
        return self._obj.invoke("privateLock", _0_IBASE_IF.ServerMngr._d_privateLock, args)

    def privateUnlock(self, *args):
        return self._obj.invoke("privateUnlock", _0_IBASE_IF.ServerMngr._d_privateUnlock, args)

omniORB.registerObjref(ServerMngr._NP_RepositoryId, _objref_ServerMngr)
_0_IBASE_IF._objref_ServerMngr = _objref_ServerMngr
del ServerMngr, _objref_ServerMngr

# ServerMngr skeleton
__name__ = "IBASE_IF__POA"
class ServerMngr (PortableServer.Servant):
    _NP_RepositoryId = _0_IBASE_IF.ServerMngr._NP_RepositoryId


    _omni_op_d = {"getServer": _0_IBASE_IF.ServerMngr._d_getServer, "privateConnect": _0_IBASE_IF.ServerMngr._d_privateConnect, "privateLock": _0_IBASE_IF.ServerMngr._d_privateLock, "privateUnlock": _0_IBASE_IF.ServerMngr._d_privateUnlock}

ServerMngr._omni_skeleton = ServerMngr
_0_IBASE_IF__POA.ServerMngr = ServerMngr
omniORB.registerSkeleton(ServerMngr._NP_RepositoryId, ServerMngr)
del ServerMngr
__name__ = "IBASE_IF"

#
# End of module "IBASE_IF"
#
__name__ = "IBASE_IF_idl"

_exported_modules = ( "IBASE_IF", )

# The end.
